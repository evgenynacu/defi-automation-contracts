{
  "address": "0x8C9Edad412F8a4aB75f9E605590B0886e1287149",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_primary",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_secondary",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract TokanRouter",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "contract TokanPair",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "contract TokanGauge",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimalsA",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "stable",
                  "type": "bool"
                }
              ],
              "internalType": "struct TokanRouter.Route[]",
              "name": "rewardExchangeRoute",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TokanDexInvestment.TokanDexInvestmentConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "__TokanDexInvestment_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOut",
          "type": "uint256"
        }
      ],
      "name": "alarm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchanged",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "calculateValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "depositPooledLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract TokanGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract TokanPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primary",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "reinvestSecondary",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reinvestRewards",
          "type": "bool"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract TokanRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondary",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_user",
          "type": "bool"
        }
      ],
      "name": "setUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x469d065f36dd6ef6d7338ddbf11442269525104fbee4aaac96b22ddf379fd77d",
  "receipt": {
    "to": null,
    "from": "0x7E31749358659c627F7f74dD0305A0Bd84c980da",
    "contractAddress": "0x8C9Edad412F8a4aB75f9E605590B0886e1287149",
    "transactionIndex": 4,
    "gasUsed": "5060973",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6ecd5f6660c3e424e5753db98be196384f06aadc19e8a167124e3601bc8ab49f",
    "transactionHash": "0x469d065f36dd6ef6d7338ddbf11442269525104fbee4aaac96b22ddf379fd77d",
    "logs": [],
    "blockNumber": 9451264,
    "cumulativeGasUsed": "6135358",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "3f00b08ceff4951537f0a0e163b74476",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_primary\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_secondary\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract TokanRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract TokanPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract TokanGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimalsA\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct TokanRouter.Route[]\",\"name\":\"rewardExchangeRoute\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokanDexInvestment.TokanDexInvestmentConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"__TokanDexInvestment_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOut\",\"type\":\"uint256\"}],\"name\":\"alarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchanged\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"calculateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"depositPooledLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract TokanGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract TokanPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reinvestSecondary\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reinvestRewards\",\"type\":\"bool\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract TokanRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondary\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_user\",\"type\":\"bool\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"alarm(uint256,uint256)\":{\"params\":{\"maxOut\":\"Maximal price for the secondary -> primary conversion (e.g 1000100000000)\",\"minOut\":\"Minimal price for the secondary -> primary conversion (e.g 1010000000000)\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"deposit(uint256)\":{\"details\":\"Deposits primary token and mints this token\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"reinvest(bool,bool)\":{\"details\":\"it does it easy way - just exchanges everything to primary first and then runs part of deposit function\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256)\":{\"details\":\"Burns this token and withdraws primary investment token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"alarm(uint256,uint256)\":{\"notice\":\"Invoked on depeg of the stablecoin\"},\"calculateValue(address)\":{\"notice\":\"calculates value for the wallet denominated in primary tokens\"},\"depositPooledLiquidity(uint256)\":{\"notice\":\"Deposit pooled liquidity (pair)\"},\"getRewardsValue()\":{\"notice\":\"Calculate total value of the rewards accumulated\"},\"reinvest(bool,bool)\":{\"notice\":\"Reinvests everything's owned into DEX (including rewards)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/TokanDexInvestment.sol\":\"TokanDexInvestment\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/interfaces/tokan/TokanGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokanGauge {\\n    function getReward() external;\\n    function earned(address account) external view returns (uint256);\\n    function deposit(uint256 amount) external;\\n    function balanceOf(address _account) external view returns (uint);\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5c74e2027b839505d5571b9bf21d7a081457337ce1e9923a1bf595aa7b9036ed\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/tokan/TokanPair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokanPair is IERC20 {\\n\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe13c4d7fc226a26ae8e7f561a409ce1f4d40cad0e6d151b8d1d21aa84796080e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/tokan/TokanRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface TokanRouter {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin, Route[] calldata routes,address to,uint deadline) external returns (uint[] memory amounts);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity\\n    ) external view returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\",\"keccak256\":\"0x3a9d437f1b8cd5c9e0c12787414ffa533d105ed589c20c76434b9511c91b029c\",\"license\":\"UNLICENSED\"},\"contracts/v2/DexInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Investment.sol\\\";\\n\\n/// @notice Represents on-chain DEX investment (in liquidity pair)\\nabstract contract DexInvestment is Investment {\\n    IERC20 public secondary;\\n    IERC20 public reward;\\n\\n    function __DexInvestment_init_unchained(IERC20 _secondary, IERC20 _reward) internal onlyInitializing {\\n        secondary = _secondary;\\n        reward = _reward;\\n    }\\n\\n    /// @notice Adds liquidity to DEX pair: calculates amount to exchange, then adds liqudity on both sides\\n    /// @param amount Amount of primary token to deposit\\n    /// @return toMint Number of tokens to be minted after depositing funds\\n    function _deposit(uint amount) internal override returns (uint toMint) {\\n        (uint dA, uint B) = _depositToDex(amount);\\n        toMint = _calculateToMint((amount - dA) + _getPrimaryOut(B));\\n    }\\n\\n    /// @notice Calculates how much tokens to mint after the deposit\\n    function _calculateToMint(uint depositedValue) internal view returns (uint toMint) {\\n        uint _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            toMint = depositedValue * 10 ** 18/ _getDecimalsA();\\n        } else {\\n            uint totalValue = _calculateTotalValue();\\n\\n            /// @dev calculating deposited assets value\\n            toMint = depositedValue * totalSupply() / (totalValue - depositedValue);\\n        }\\n    }\\n\\n    // @notice Prepares withdrawal of the liquidity. Takes proportionally all values from: owned assets, invested, rewards\\n    function _prepareWithdraw(uint amount, uint totalSupply) internal override returns (uint readyToWithdraw) {\\n        uint userA = primary.balanceOf(address(this)) * amount / totalSupply;\\n        uint userB = secondary.balanceOf(address(this)) * amount / totalSupply;\\n        (uint amountA, uint amountB) = _withdrawFromDex(amount, totalSupply);\\n\\n        // @dev first just sum owned A and extracted from DEX liquidity\\n        readyToWithdraw = userA + amountA;\\n        // @dev then exchange secondary to primary and add it as well\\n        readyToWithdraw += _exchangeSecondary(userB + amountB);\\n\\n        if (address(reward) != 0x0000000000000000000000000000000000000000) {\\n            _receiveRewards();\\n            uint rewards = reward.balanceOf(address(this));\\n            uint userRewards = rewards * amount / totalSupply;\\n            readyToWithdraw += _exchangeRewards(userRewards);\\n        }\\n    }\\n\\n    /// @notice Reinvests everything's owned into DEX (including rewards)\\n    /// @dev it does it easy way - just exchanges everything to primary first and then runs part of deposit function\\n    function reinvest(bool reinvestSecondary, bool reinvestRewards) external onlyUser {\\n        if (reinvestSecondary) {\\n            uint ownedB = secondary.balanceOf(address(this));\\n            _exchangeSecondary(ownedB);\\n        }\\n\\n        if (reinvestRewards && address(reward) != 0x0000000000000000000000000000000000000000) {\\n            _receiveRewards();\\n            uint rewards = reward.balanceOf(address(this));\\n\\n            if (rewards != 0) {\\n                _exchangeRewards(rewards);\\n            }\\n        }\\n\\n        uint amount = primary.balanceOf(address(this));\\n        _depositToDex(amount);\\n    }\\n\\n    /// @notice Calculate total value of the rewards accumulated\\n    function getRewardsValue() view external returns (uint) {\\n        uint current = reward.balanceOf(address(this));\\n        uint earned = _getRewards();\\n        return _getRewardValue(current + earned);\\n    }\\n\\n    function _depositToDex(uint amount) internal returns (uint dA, uint B) {\\n        if (amount != 0) {\\n            dA = _calculateDeltaA(amount);\\n\\n            /// @dev B = amount of secondary tokens which are exchanged\\n            B = _exchangePrimary(dA);\\n\\n            /// @dev put into the liquidity pool\\n            _putIntoDex(amount - dA, B);\\n        } else {\\n            dA = 0;\\n            B = 0;\\n        }\\n    }\\n\\n    function _calculateTotalValue() internal view override returns (uint total) {\\n        (uint amountA, uint amountB, uint rewards) = _calculateAllAssets();\\n        total = amountA + _getPrimaryOut(amountB) + _getRewardValue(rewards);\\n    }\\n\\n    /// @dev Calculates all assets owned by the contract\\n    function _calculateAllAssets() internal view returns (uint amountA, uint amountB, uint rewards) {\\n        uint ownedA = primary.balanceOf(address(this));\\n        uint ownedB = secondary.balanceOf(address(this));\\n        (uint investedA, uint investedB) = _getDexLiquidity();\\n        (uint ownedRewards, uint unclaimedRewards) = _getAllRewards();\\n        amountA = ownedA + investedA;\\n        amountB = ownedB + investedB;\\n        rewards = ownedRewards + unclaimedRewards;\\n    }\\n\\n    /// @notice Calculates A to exchange to B to add as DEX liquidity\\n    /// @dev This function works under assumption that deposited liquidity is too small to change balance of reserves\\n    /// @dev Definitions: Ra = Reserves of A(primary), Rb = Reserves of B(secondary), X = amount, dX = X to exchange\\n    /// @dev P = amount out for B (if amount of A = 1) (So P = Price)\\n    /// @dev this holds: Ra/Rb = (A - dA) / dA * P\\n    /// @dev In the result dA = A * Rb / (Ra * P + Rb)\\n    function _calculateDeltaA(uint A) internal view returns (uint dA) {\\n        uint decimalsA = _getDecimalsA();\\n        uint P = _getSecondaryOut(decimalsA);\\n        (uint Ra, uint Rb) = _getReserves();\\n        return A * Rb / (Ra * P / decimalsA + Rb);\\n    }\\n\\n    /// @notice Gets rewards (owned and unclaimed)\\n    function _getAllRewards() internal view returns (uint owned, uint unclaimed) {\\n        if (address(reward) == 0x0000000000000000000000000000000000000000) {\\n            owned = 0;\\n            unclaimed = 0;\\n        } else {\\n            owned = reward.balanceOf(address(this));\\n            unclaimed = _getRewards();\\n        }\\n    }\\n\\n    /// @notice Gets reserves for both assets in the pool\\n    function _getReserves() internal virtual view returns (uint reserveA, uint reserveB);\\n\\n    /// @notice Gets 10**decimals for primary asset\\n    function _getDecimalsA() internal view virtual returns (uint decimalsA);\\n\\n    /// @notice Calculates how much secondary tokens will be returned if primaryAmount exchanged\\n    function _getSecondaryOut(uint primaryAmount) internal view virtual returns (uint secondaryAmount);\\n\\n    /// @notice Calculates how much primary tokens will be returned if secondaryAmount exchanged\\n    function _getPrimaryOut(uint secondaryAmount) internal view virtual returns (uint primaryAmount);\\n\\n    /// @notice Calculates how much primary tokens will be returned if reward exchanged\\n    function _getRewardValue(uint rewardAmount) internal view virtual returns (uint primaryAmount);\\n\\n    /// @notice Exchanges primary token and gets secondary token\\n    function _exchangePrimary(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeSecondary(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeRewards(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getDexLiquidity() internal view virtual returns (uint amountA, uint amountB);\\n\\n    /// @notice Returns rewards earned already\\n    function _getRewards() internal view virtual returns (uint amount);\\n\\n    /// @notice Receives rewards and transfers them to this smart-contract\\n    function _receiveRewards() internal virtual;\\n\\n    /// @notice Adds liquidity into DEX pool\\n    function _putIntoDex(uint amountA, uint amountB) internal virtual returns (uint resultA, uint resultB);\\n\\n    /// @notice Removes part of the liquidity from DEX (amount/totalSupply)\\n    function _withdrawFromDex(uint amount, uint totalSupply) internal virtual returns (uint amountA, uint amountB);\\n}\\n\",\"keccak256\":\"0x0e2ba053b096edd8dc5b5e0e9937cf1dc1010b511d94ffb0a444c8a81c57dc8d\",\"license\":\"UNLICENSED\"},\"contracts/v2/Investment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @dev Represents on-chain investment. This covers any investment where you deposit single token -> you get another ERC-20 in return.\\n/// @dev Later you can redeem original investment token\\nabstract contract Investment is ERC20Upgradeable {\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    IERC20 public primary;\\n\\n    function __SingleTokenInvestment_init_unchained(IERC20 _primary) internal onlyInitializing {\\n        primary = _primary;\\n    }\\n\\n    /// @notice calculates value for the wallet denominated in primary tokens\\n    function calculateValue(address wallet) public view returns (uint value) {\\n        uint _totalSupply = totalSupply();\\n        uint _balance = balanceOf(wallet);\\n        uint _totalValue = _calculateTotalValue();\\n        return _totalValue * _balance / _totalSupply;\\n    }\\n\\n    /// @notice Calculates total assets denominated in primary tokens\\n    function _calculateTotalValue() internal view virtual returns (uint total);\\n\\n    /// @dev Deposits primary token and mints this token\\n    function deposit(uint amount) external onlyUser returns (uint minted) {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(primary.transferFrom(_msgSender(), address(this), amount), \\\"Transfer failed\\\");\\n        uint toMint = _deposit(amount);\\n        _mint(_msgSender(), toMint);\\n        return toMint;\\n    }\\n\\n    /// @dev Burns this token and withdraws primary investment token\\n    function withdraw(uint amount) external onlyUser returns (uint withdrawn) {\\n        require(amount > 0, \\\"Zero amount\\\");\\n\\n        uint _totalSupply = totalSupply();\\n        _burn(_msgSender(), amount);\\n\\n        uint toWithdraw = _prepareWithdraw(amount, _totalSupply);\\n        require(primary.transfer(_msgSender(), toWithdraw), \\\"Transfer failed\\\");\\n        return toWithdraw;\\n    }\\n\\n    /// @dev Prepares liquidity to be withdrawn. Returns amount of tokens to withdraw\\n    function _prepareWithdraw(uint amount, uint totalSupply) internal virtual returns (uint readyToWithdraw);\\n\\n    function _deposit(uint amount) internal virtual returns (uint toMint);\\n\\n    modifier onlyUser() {\\n        require(_isUser(), \\\"NotUser\\\");\\n        _;\\n    }\\n\\n    function _isUser() internal virtual view returns (bool);\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view returns (address adminAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n\\n    function claimOwner() external {\\n        require(_owner() == 0x0000000000000000000000000000000000000000, \\\"owner already set\\\");\\n        _setOwner(_msgSender());\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address previousOwner = _owner();\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, newOwner)\\n        }\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x48d04006351986ac457b4dba29de562ff39fce030986afb57e77b70c8829e152\",\"license\":\"UNLICENSED\"},\"contracts/v2/TokanDexInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// This code has not been professionally audited, therefore I cannot make any promises about\\n// safety or correctness. Use at own risk.\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DexInvestment.sol\\\";\\nimport \\\"../interfaces/tokan/TokanPair.sol\\\";\\nimport \\\"../interfaces/tokan/TokanRouter.sol\\\";\\nimport \\\"../interfaces/tokan/TokanGauge.sol\\\";\\n\\ncontract TokanDexInvestment is DexInvestment {\\n    uint constant private UINT_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    TokanRouter public router;\\n    TokanPair public pair;\\n    TokanGauge public gauge;\\n    bool private stable;\\n    uint private decimalsA;\\n    TokanRouter.Route[] private rewardExchangeRoute;\\n    mapping(address account => bool) private users;\\n\\n    struct TokanDexInvestmentConfig {\\n        TokanRouter router;\\n        TokanPair pair;\\n        TokanGauge gauge;\\n        uint decimalsA;\\n        bool stable;\\n        TokanRouter.Route[] rewardExchangeRoute;\\n    }\\n\\n    function __TokanDexInvestment_init(string memory name_, string memory symbol_, IERC20 _primary, IERC20 _secondary, IERC20 _reward, TokanDexInvestmentConfig memory config) initializer external {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n        __SingleTokenInvestment_init_unchained(_primary);\\n        __DexInvestment_init_unchained(_secondary, _reward);\\n        __TokanDexInvestment_init_unchained(config);\\n        approveAll();\\n    }\\n\\n    function __TokanDexInvestment_init_unchained(TokanDexInvestmentConfig memory config) internal onlyInitializing {\\n        router = config.router;\\n        pair = config.pair;\\n        gauge = config.gauge;\\n        decimalsA = config.decimalsA;\\n        stable = config.stable;\\n        for (uint i = 0; i < config.rewardExchangeRoute.length; i++) {\\n            TokanRouter.Route memory route = config.rewardExchangeRoute[i];\\n            rewardExchangeRoute.push(route);\\n        }\\n    }\\n\\n    /// @notice Deposit pooled liquidity (pair)\\n    function depositPooledLiquidity(uint liquidity) external onlyUser returns (uint minted) {\\n        pair.transferFrom(_msgSender(), address(this), liquidity);\\n        gauge.deposit(liquidity);\\n\\n        uint liquidityValue = _calculateLiquidityValue(liquidity);\\n        uint toMint = _calculateToMint(liquidityValue);\\n        _mint(_msgSender(), toMint);\\n        return toMint;\\n    }\\n\\n    /// @notice Calculates value of the pooled liquidity (in primary token A)\\n    function _calculateLiquidityValue(uint liquidity) internal view returns (uint amount) {\\n        (uint amountA, uint amountB) = _calculateLiquidityAmounts(liquidity);\\n        return amountA + _getPrimaryOut(amountB);\\n    }\\n\\n    function approveAll() public {\\n        primary.approve(address(router), UINT_MAX);\\n        secondary.approve(address(router), UINT_MAX);\\n        pair.approve(address(gauge), UINT_MAX);\\n        pair.approve(address(router), UINT_MAX);\\n        reward.approve(address(router), UINT_MAX);\\n    }\\n\\n    /// @notice Invoked on depeg of the stablecoin\\n    /// @param minOut Minimal price for the secondary -> primary conversion (e.g 1010000000000)\\n    /// @param maxOut Maximal price for the secondary -> primary conversion (e.g 1000100000000)\\n    function alarm(uint minOut, uint maxOut) external onlyUser returns (uint exchanged) {\\n        _withdrawFromDex(100, 100);\\n\\n        uint amountB = secondary.balanceOf(address(this));\\n        uint amountA = _exchangeSecondary(amountB);\\n        //\\u043c\\u0435\\u043d\\u044f\\u043b\\u0438 100, \\u043f\\u043e\\u043b\\u0443\\u0447\\u0438\\u043b\\u0438 out in minPrice. in >= out * minPrice\\n        // price = out / in. price = in / out\\n        // in * maxPrice < out\\n        require(amountA * minOut >= amountB, \\\"minimal price\\\");\\n        require(amountA * maxOut <= amountB, \\\"maximal price\\\");\\n        return amountA;\\n    }\\n\\n    /// @notice Gets reserves for both assets in the pool\\n    function _getReserves() internal override view returns (uint reserveA, uint reserveB) {\\n        (reserveA, reserveB,) = pair.getReserves();\\n    }\\n\\n    /// @notice Gets 10**decimals for primary asset\\n    function _getDecimalsA() internal view override returns (uint) {\\n        return decimalsA;\\n    }\\n\\n    /// @notice Calculates how much secondary tokens will be returned if mainAmount exchanged\\n    function _getSecondaryOut(uint mainAmount) internal view override returns (uint secondaryAmount) {\\n        return pair.getAmountOut(mainAmount, address(primary));\\n    }\\n\\n    /// @notice Calculates how much primary tokens will be returned if secondaryAmount exchanged\\n    function _getPrimaryOut(uint secondaryAmount) internal view override returns (uint primaryAmount) {\\n        return pair.getAmountOut(secondaryAmount, address(secondary));\\n    }\\n\\n    /// @notice Exchanges main and gets secondary token\\n    function _exchangePrimary(uint amount) internal override returns (uint out) {\\n        TokanRouter.Route[] memory route = new TokanRouter.Route[](1);\\n        route[0] = TokanRouter.Route({from: address(primary), to: address(secondary), stable: stable});\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _getSecondaryOut(amount), route, address(this), block.timestamp);\\n        return amounts[1];\\n    }\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeSecondary(uint amount) internal override returns (uint out) {\\n        TokanRouter.Route[] memory route = new TokanRouter.Route[](1);\\n        route[0] = TokanRouter.Route({from: address(secondary), to: address(primary), stable: stable});\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _getPrimaryOut(amount), route, address(this), block.timestamp);\\n        return amounts[1];\\n    }\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeRewards(uint amount) internal override returns (uint out) {\\n        uint _value = _getRewardValue(amount);\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _value, rewardExchangeRoute, address(this), block.timestamp);\\n        return amounts[rewardExchangeRoute.length];\\n    }\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getDexLiquidity() internal view override returns (uint amountA, uint amountB) {\\n        // @dev liquidity - total amount of Pair tokens, deposited in Gauge for this Pool\\n        // @dev potentially some amount can be owned by this contract and not in the gauge, but will always put Pair tokens into the gauge, so should not happen\\n        uint liquidity = gauge.balanceOf(address(this));\\n        (amountA, amountB) = _calculateLiquidityAmounts(liquidity);\\n    }\\n\\n    /// @notice Calculates how much A & B assets pooled\\n    function _calculateLiquidityAmounts(uint liquidity) view internal returns (uint amountA, uint amountB) {\\n        // @dev _balance0, _balance1 - how much primary and secondary tokens pair owns (total DEX liquidity)\\n        uint256 _balance0 = primary.balanceOf(address(pair));\\n        uint256 _balance1 = secondary.balanceOf(address(pair));\\n\\n        // @dev _totalSupply - how much of DEX tokens issued\\n        uint256 _totalSupply = pair.totalSupply();\\n        amountA = (liquidity * _balance0) / _totalSupply;\\n        amountB = (liquidity * _balance1) / _totalSupply;\\n    }\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getRewards() internal view override returns (uint amount) {\\n        return gauge.earned(address(this));\\n    }\\n\\n    /// @notice Adds liquidity into DEX pool\\n    function _putIntoDex(uint amountA, uint amountB) internal override returns (uint resultA, uint resultB) {\\n        bool _stable = stable;\\n        (uint amountAQuote, uint amountBQuote,) = router.quoteAddLiquidity(address(primary), address(secondary), _stable, amountA, amountB);\\n        uint amountAmin = amountAQuote * 999 / 1000;\\n        uint amountBMin = amountBQuote * 999 / 1000;\\n        (uint addedA, uint addedB, uint liquidity) = router.addLiquidity(address(primary), address(secondary), _stable, amountAQuote, amountBQuote, amountAmin, amountBMin, address(this), block.timestamp);\\n\\n        resultA = addedA;\\n        resultB = addedB;\\n\\n        gauge.deposit(liquidity);\\n    }\\n\\n    /// @notice Calculates how much primary tokens will be returned if reward exchanged\\n    function _getRewardValue(uint rewardAmount) internal view override returns (uint primaryAmount) {\\n        uint[] memory amounts = router.getAmountsOut(rewardAmount, rewardExchangeRoute);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /// @notice Receives rewards and transfers them to this smart-contract\\n    function _receiveRewards() internal override {\\n        gauge.getReward();\\n    }\\n\\n    /// @notice Removes part of the liquidity from DEX (amount/totalSupply)\\n    function _withdrawFromDex(uint amount, uint totalSupply) internal override returns (uint amountA, uint amountB) {\\n        uint toWithdraw = gauge.balanceOf(address(this)) * amount / totalSupply;\\n        gauge.withdraw(toWithdraw);\\n        (uint quoteA, uint quoteB) = router.quoteRemoveLiquidity(address(primary), address(secondary), stable, toWithdraw);\\n        (uint withdrawnA, uint withdrawnB) = router.removeLiquidity(address(primary), address(secondary), stable, toWithdraw, quoteA, quoteB, address(this), block.timestamp);\\n        amountA = withdrawnA;\\n        amountB = withdrawnB;\\n    }\\n\\n    function _isUser() internal override view returns (bool) {\\n        return users[_msgSender()];\\n    }\\n\\n    function setUser(address account, bool _user) external onlyOwner() {\\n        users[account] = _user;\\n    }\\n}\\n\",\"keccak256\":\"0xf102ad94be954f463a6c6cb8591e40e6c2eccd51c9db91861e96253a42c7f96c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615aca80620000216000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637b634b01116100de578063af79b2a611610097578063b7ae7e3911610071578063b7ae7e391461049d578063c6dbdf61146104b9578063dd62ed3e146104d7578063f887ea40146105075761018e565b8063af79b2a614610421578063b4d8b8c814610451578063b6b55f251461046d5761018e565b80637b634b011461034957806395d89b41146103795780639d3c8cc414610397578063a6f19c84146103b5578063a8aa1b31146103d3578063a9059cbb146103f15761018e565b8063313ce5671161014b578063432075461161012557806343207546146102af57806361a84ef0146102df57806370a08231146102fd5780637a57a9841461032d5761018e565b8063313ce5671461027d578063380d0c081461029b5780633bd1adec146102a55761018e565b806306fdde0314610193578063095ea7b3146101b157806318160ddd146101e1578063228cb733146101ff57806323b872dd1461021d5780632e1a7d4d1461024d575b600080fd5b61019b610525565b6040516101a89190614134565b60405180910390f35b6101cb60048036038101906101c691906141fe565b6105c6565b6040516101d89190614259565b60405180910390f35b6101e96105e9565b6040516101f69190614283565b60405180910390f35b610207610601565b60405161021491906142fd565b60405180910390f35b61023760048036038101906102329190614318565b610627565b6040516102449190614259565b60405180910390f35b6102676004803603810190610262919061436b565b610656565b6040516102749190614283565b60405180910390f35b6102856107fb565b60405161029291906143b4565b60405180910390f35b6102a3610804565b005b6102ad610c73565b005b6102c960048036038101906102c4919061436b565b610cfb565b6040516102d69190614283565b60405180910390f35b6102e7610eb0565b6040516102f49190614283565b60405180910390f35b610317600480360381019061031291906143cf565b610f78565b6040516103249190614283565b60405180910390f35b61034760048036038101906103429190614428565b610fcf565b005b610363600480360381019061035e9190614468565b6110a6565b6040516103709190614283565b60405180910390f35b610381611250565b60405161038e9190614134565b60405180910390f35b61039f6112f1565b6040516103ac91906142fd565b60405180910390f35b6103bd611317565b6040516103ca91906144c9565b60405180910390f35b6103db61133d565b6040516103e89190614505565b60405180910390f35b61040b600480360381019061040691906141fe565b611363565b6040516104189190614259565b60405180910390f35b61043b600480360381019061043691906143cf565b611386565b6040516104489190614283565b60405180910390f35b61046b6004803603810190610466919061493f565b6113cd565b005b6104876004803603810190610482919061436b565b61158e565b6040516104949190614283565b60405180910390f35b6104b760048036038101906104b29190614a20565b611727565b005b6104c16119ed565b6040516104ce91906142fd565b60405180910390f35b6104f160048036038101906104ec9190614a60565b611a11565b6040516104fe9190614283565b60405180910390f35b61050f611aa6565b60405161051c9190614ac1565b60405180910390f35b60606000610531611acc565b905080600301805461054290614b0b565b80601f016020809104026020016040519081016040528092919081815260200182805461056e90614b0b565b80156105bb5780601f10610590576101008083540402835291602001916105bb565b820191906000526020600020905b81548152906001019060200180831161059e57829003601f168201915b505050505091505090565b6000806105d1611af4565b90506105de818585611afc565b600191505092915050565b6000806105f4611acc565b9050806002015491505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610632611af4565b905061063f858285611b0e565b61064a858585611ba2565b60019150509392505050565b6000610660611c96565b61069f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069690614b88565b60405180910390fd5b600082116106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990614bf4565b60405180910390fd5b60006106ec6105e9565b90506106ff6106f9611af4565b84611cf1565b600061070b8483611d73565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610751611af4565b836040518363ffffffff1660e01b815260040161076f929190614c23565b6020604051808303816000875af115801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190614c61565b6107f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e890614cda565b60405180910390fd5b8092505050919050565b60006012905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108a1929190614c23565b6020604051808303816000875af11580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e49190614c61565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610984929190614c23565b6020604051808303816000875af11580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c79190614c61565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a67929190614c23565b6020604051808303816000875af1158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190614c61565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610b4a929190614c23565b6020604051808303816000875af1158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d9190614c61565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610c2d929190614c23565b6020604051808303816000875af1158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190614c61565b50565b600073ffffffffffffffffffffffffffffffffffffffff16610c9361205a565b73ffffffffffffffffffffffffffffffffffffffff1614610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce090614d46565b60405180910390fd5b610cf9610cf4611af4565b612083565b565b6000610d05611c96565b610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b90614b88565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610d8a611af4565b30856040518463ffffffff1660e01b8152600401610daa93929190614d66565b6020604051808303816000875af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190614c61565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25836040518263ffffffff1660e01b8152600401610e499190614283565b600060405180830381600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505050506000610e8683612110565b90506000610e938261213f565b9050610ea6610ea0611af4565b826121c0565b8092505050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f0e9190614d9d565b602060405180830381865afa158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190614dcd565b90506000610f5b612242565b9050610f718183610f6c9190614e29565b6122e4565b9250505090565b600080610f83611acc565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b610fd761205a565b73ffffffffffffffffffffffffffffffffffffffff16610ff5611af4565b73ffffffffffffffffffffffffffffffffffffffff161461104b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104290614ea9565b60405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60006110b0611c96565b6110ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e690614b88565b60405180910390fd5b6110fa6064806123bd565b50506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111599190614d9d565b602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a9190614dcd565b905060006111a782612711565b90508185826111b69190614ec9565b10156111f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ee90614f57565b60405180910390fd5b8184826112049190614ec9565b1115611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90614fc3565b60405180910390fd5b809250505092915050565b6060600061125c611acc565b905080600401805461126d90614b0b565b80601f016020809104026020016040519081016040528092919081815260200182805461129990614b0b565b80156112e65780601f106112bb576101008083540402835291602001916112e6565b820191906000526020600020905b8154815290600101906020018083116112c957829003601f168201915b505050505091505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061136e611af4565b905061137b818585611ba2565b600191505092915050565b6000806113916105e9565b9050600061139e84610f78565b905060006113aa612900565b90508282826113b99190614ec9565b6113c39190615012565b9350505050919050565b60006113d7612943565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156114255750825b9050600060018367ffffffffffffffff1614801561145a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611468575080155b1561149f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156114ef5760018560000160086101000a81548160ff0219169083151502179055505b6114f761296b565b6115018b8b612975565b61150a896129b2565b61151488886129fd565b61151d86612a8b565b611525610804565b83156115815760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516115789190615092565b60405180910390a15b5050505050505050505050565b6000611598611c96565b6115d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ce90614b88565b60405180910390fd5b6000821161161a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161190614bf4565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd61165e611af4565b30856040518463ffffffff1660e01b815260040161167e93929190614d66565b6020604051808303816000875af115801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c19190614c61565b611700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f790614cda565b60405180910390fd5b600061170b83612cac565b905061171e611718611af4565b826121c0565b80915050919050565b61172f611c96565b61176e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176590614b88565b60405180910390fd5b8115611820576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117d19190614d9d565b602060405180830381865afa1580156117ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118129190614dcd565b905061181d81612711565b50505b80801561187c5750600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561193e57611889612cee565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118e69190614d9d565b602060405180830381865afa158015611903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119279190614dcd565b90506000811461193c5761193a81612d72565b505b505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161199a9190614d9d565b602060405180830381865afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190614dcd565b90506119e681612e59565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080611a1c611acc565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b611b098383836001612ea4565b505050565b6000611b1a8484611a11565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611b9c5781811015611b8c578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401611b83939291906150ad565b60405180910390fd5b611b9b84848484036000612ea4565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c145760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401611c0b9190614d9d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c865760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611c7d9190614d9d565b60405180910390fd5b611c9183838361308a565b505050565b600060086000611ca4611af4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d635760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401611d5a9190614d9d565b60405180910390fd5b611d6f8260008361308a565b5050565b600080828460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dd19190614d9d565b602060405180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190614dcd565b611e1c9190614ec9565b611e269190615012565b905060008385600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e879190614d9d565b602060405180830381865afa158015611ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec89190614dcd565b611ed29190614ec9565b611edc9190615012565b9050600080611eeb87876123bd565b915091508184611efb9190614e29565b9450611f118184611f0c9190614e29565b612711565b85611f1c9190614e29565b9450600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461205057611f7c612cee565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fd99190614d9d565b602060405180830381865afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190614dcd565b9050600087898361202b9190614ec9565b6120359190615012565b905061204081612d72565b8761204b9190614e29565b965050505b5050505092915050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b600061208d61205a565b9050817fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103558173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600061211e846132c9565b9150915061212b8161351e565b826121369190614e29565b92505050919050565b60008061214a6105e9565b9050600081036121815761215c6135e7565b670de0b6b3a7640000846121709190614ec9565b61217a9190615012565b91506121ba565b600061218b612900565b9050838161219991906150e4565b6121a16105e9565b856121ac9190614ec9565b6121b69190615012565b9250505b50919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036122325760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016122299190614d9d565b60405180910390fd5b61223e6000838361308a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b815260040161229e9190614d9d565b602060405180830381865afa1580156122bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122df9190614dcd565b905090565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639881fcb48460076040518363ffffffff1660e01b81526004016123459291906152c2565b600060405180830381865afa158015612362573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061238b91906153b5565b9050806001825161239c91906150e4565b815181106123ad576123ac6153fe565b5b6020026020010151915050919050565b60008060008385600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161241f9190614d9d565b602060405180830381865afa15801561243c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124609190614dcd565b61246a9190614ec9565b6124749190615012565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016124d19190614283565b600060405180830381600087803b1580156124eb57600080fd5b505af11580156124ff573d6000803e3d6000fd5b50505050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634386e63c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff16876040518563ffffffff1660e01b81526004016125b8949392919061542d565b6040805180830381865afa1580156125d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f89190615472565b91509150600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dede6c460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff1689898930426040518963ffffffff1660e01b81526004016126b99897969594939291906154b2565b60408051808303816000875af11580156126d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fb9190615472565b9150915081965080955050505050509250929050565b600080600167ffffffffffffffff81111561272f5761272e61452a565b5b60405190808252806020026020018201604052801561276857816020015b612755614055565b81526020019060019003908161274d5790505b5090506040518060600160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff16151581525081600081518110612819576128186153fe565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88561286e8761351e565b8530426040518663ffffffff1660e01b8152600401612891959493929190615610565b6000604051808303816000875af11580156128b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128d991906153b5565b9050806001815181106128ef576128ee6153fe565b5b602002602001015192505050919050565b60008060008061290e6135f1565b92509250925061291d816122e4565b6129268361351e565b846129319190614e29565b61293b9190614e29565b935050505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612973613786565b565b61297d613786565b6000612987611acc565b90508281600301908161299a919061580c565b50818160040190816129ac919061580c565b50505050565b6129ba613786565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612a05613786565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b612a93613786565b8060000151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060200151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060400151600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606001516006819055508060800151600560146101000a81548160ff02191690831515021790555060005b8160a0015151811015612ca85760008260a001518281518110612bb457612bb36153fe565b5b60200260200101519050600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055505050508080600101915050612b8e565b5050565b6000806000612cba84612e59565b91509150612ce5612cca8261351e565b8386612cd691906150e4565b612ce09190614e29565b61213f565b92505050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612d5857600080fd5b505af1158015612d6c573d6000803e3d6000fd5b50505050565b600080612d7e836122e4565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88584600730426040518663ffffffff1660e01b8152600401612de69594939291906158de565b6000604051808303816000875af1158015612e05573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e2e91906153b5565b90508060078054905081518110612e4857612e476153fe565b5b602002602001015192505050919050565b60008060008314612e9657612e6d836137c6565b9150612e7882613832565b9050612e8f8284612e8991906150e4565b82613a21565b5050612e9f565b60009150600090505b915091565b6000612eae611acc565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612f225760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401612f199190614d9d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612f945760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401612f8b9190614d9d565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508115613083578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161307a9190614283565b60405180910390a35b5050505050565b6000613094611acc565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036130ea57818160020160008282546130de9190614e29565b925050819055506131c3565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015613179578481846040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401613170939291906150ad565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361320e5781816002016000828254039250508190555061325e565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516132bb9190614283565b60405180910390a350505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161334a9190614d9d565b602060405180830381865afa158015613367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338b9190614dcd565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161340c9190614d9d565b602060405180830381865afa158015613429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344d9190614dcd565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e29190614dcd565b90508083876134f19190614ec9565b6134fb9190615012565b945080828761350a9190614ec9565b6135149190615012565b9350505050915091565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a83600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161359f929190615938565b602060405180830381865afa1580156135bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e09190614dcd565b9050919050565b6000600654905090565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016136509190614d9d565b602060405180830381865afa15801561366d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136919190614dcd565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016136f09190614d9d565b602060405180830381865afa15801561370d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137319190614dcd565b905060008061373e613d01565b9150915060008061374d613dba565b91509150838661375d9190614e29565b9850828561376b9190614e29565b975080826137799190614e29565b9650505050505050909192565b61378e613ecd565b6137c4576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000806137d16135e7565b905060006137de82613eed565b90506000806137eb613fb4565b91509150808484846137fd9190614ec9565b6138079190615012565b6138119190614e29565b818761381d9190614ec9565b6138279190615012565b945050505050919050565b600080600167ffffffffffffffff8111156138505761384f61452a565b5b60405190808252806020026020018201604052801561388957816020015b613876614055565b81526020019060019003908161386e5790505b509050604051806060016040528060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff1615158152508160008151811061393a576139396153fe565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88561398f87613eed565b8530426040518663ffffffff1660e01b81526004016139b2959493929190615610565b6000604051808303816000875af11580156139d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139fa91906153b5565b905080600181518110613a1057613a0f6153fe565b5b602002602001015192505050919050565b6000806000600560149054906101000a900460ff169050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398a0fb3c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868b8b6040518663ffffffff1660e01b8152600401613ae0959493929190615961565b606060405180830381865afa158015613afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2191906159b4565b509150915060006103e86103e784613b399190614ec9565b613b439190615012565b905060006103e86103e784613b589190614ec9565b613b629190615012565b90506000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a47ddc360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b8b8b8b8b30426040518a63ffffffff1660e01b8152600401613c1699989796959493929190615a07565b6060604051808303816000875af1158015613c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5991906159b4565b925092509250829950819850600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b8152600401613cc09190614283565b600060405180830381600087803b158015613cda57600080fd5b505af1158015613cee573d6000803e3d6000fd5b5050505050505050505050509250929050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613d619190614d9d565b602060405180830381865afa158015613d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613da29190614dcd565b9050613dad816132c9565b8093508194505050509091565b600080600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603613e20576000915060009050613ec9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613e7b9190614d9d565b602060405180830381865afa158015613e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebc9190614dcd565b9150613ec6612242565b90505b9091565b6000613ed7612943565b60000160089054906101000a900460ff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401613f6c929190615938565b602060405180830381865afa158015613f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fad9190614dcd565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614024573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404891906159b4565b5080925081935050509091565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156140de5780820151818401526020810190506140c3565b60008484015250505050565b6000601f19601f8301169050919050565b6000614106826140a4565b61411081856140af565b93506141208185602086016140c0565b614129816140ea565b840191505092915050565b6000602082019050818103600083015261414e81846140fb565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006141958261416a565b9050919050565b6141a58161418a565b81146141b057600080fd5b50565b6000813590506141c28161419c565b92915050565b6000819050919050565b6141db816141c8565b81146141e657600080fd5b50565b6000813590506141f8816141d2565b92915050565b6000806040838503121561421557614214614160565b5b6000614223858286016141b3565b9250506020614234858286016141e9565b9150509250929050565b60008115159050919050565b6142538161423e565b82525050565b600060208201905061426e600083018461424a565b92915050565b61427d816141c8565b82525050565b60006020820190506142986000830184614274565b92915050565b6000819050919050565b60006142c36142be6142b98461416a565b61429e565b61416a565b9050919050565b60006142d5826142a8565b9050919050565b60006142e7826142ca565b9050919050565b6142f7816142dc565b82525050565b600060208201905061431260008301846142ee565b92915050565b60008060006060848603121561433157614330614160565b5b600061433f868287016141b3565b9350506020614350868287016141b3565b9250506040614361868287016141e9565b9150509250925092565b60006020828403121561438157614380614160565b5b600061438f848285016141e9565b91505092915050565b600060ff82169050919050565b6143ae81614398565b82525050565b60006020820190506143c960008301846143a5565b92915050565b6000602082840312156143e5576143e4614160565b5b60006143f3848285016141b3565b91505092915050565b6144058161423e565b811461441057600080fd5b50565b600081359050614422816143fc565b92915050565b6000806040838503121561443f5761443e614160565b5b600061444d858286016141b3565b925050602061445e85828601614413565b9150509250929050565b6000806040838503121561447f5761447e614160565b5b600061448d858286016141e9565b925050602061449e858286016141e9565b9150509250929050565b60006144b3826142ca565b9050919050565b6144c3816144a8565b82525050565b60006020820190506144de60008301846144ba565b92915050565b60006144ef826142ca565b9050919050565b6144ff816144e4565b82525050565b600060208201905061451a60008301846144f6565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614562826140ea565b810181811067ffffffffffffffff821117156145815761458061452a565b5b80604052505050565b6000614594614156565b90506145a08282614559565b919050565b600067ffffffffffffffff8211156145c0576145bf61452a565b5b6145c9826140ea565b9050602081019050919050565b82818337600083830152505050565b60006145f86145f3846145a5565b61458a565b90508281526020810184848401111561461457614613614525565b5b61461f8482856145d6565b509392505050565b600082601f83011261463c5761463b614520565b5b813561464c8482602086016145e5565b91505092915050565b60006146608261418a565b9050919050565b61467081614655565b811461467b57600080fd5b50565b60008135905061468d81614667565b92915050565b600080fd5b600080fd5b60006146a88261418a565b9050919050565b6146b88161469d565b81146146c357600080fd5b50565b6000813590506146d5816146af565b92915050565b60006146e68261418a565b9050919050565b6146f6816146db565b811461470157600080fd5b50565b600081359050614713816146ed565b92915050565b60006147248261418a565b9050919050565b61473481614719565b811461473f57600080fd5b50565b6000813590506147518161472b565b92915050565b600067ffffffffffffffff8211156147725761477161452a565b5b602082029050602081019050919050565b600080fd5b60006060828403121561479e5761479d614693565b5b6147a8606061458a565b905060006147b8848285016141b3565b60008301525060206147cc848285016141b3565b60208301525060406147e084828501614413565b60408301525092915050565b60006147ff6147fa84614757565b61458a565b9050808382526020820190506060840283018581111561482257614821614783565b5b835b8181101561484b57806148378882614788565b845260208401935050606081019050614824565b5050509392505050565b600082601f83011261486a57614869614520565b5b813561487a8482602086016147ec565b91505092915050565b600060c0828403121561489957614898614693565b5b6148a360c061458a565b905060006148b3848285016146c6565b60008301525060206148c784828501614704565b60208301525060406148db84828501614742565b60408301525060606148ef848285016141e9565b606083015250608061490384828501614413565b60808301525060a082013567ffffffffffffffff81111561492757614926614698565b5b61493384828501614855565b60a08301525092915050565b60008060008060008060c0878903121561495c5761495b614160565b5b600087013567ffffffffffffffff81111561497a57614979614165565b5b61498689828a01614627565b965050602087013567ffffffffffffffff8111156149a7576149a6614165565b5b6149b389828a01614627565b95505060406149c489828a0161467e565b94505060606149d589828a0161467e565b93505060806149e689828a0161467e565b92505060a087013567ffffffffffffffff811115614a0757614a06614165565b5b614a1389828a01614883565b9150509295509295509295565b60008060408385031215614a3757614a36614160565b5b6000614a4585828601614413565b9250506020614a5685828601614413565b9150509250929050565b60008060408385031215614a7757614a76614160565b5b6000614a85858286016141b3565b9250506020614a96858286016141b3565b9150509250929050565b6000614aab826142ca565b9050919050565b614abb81614aa0565b82525050565b6000602082019050614ad66000830184614ab2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614b2357607f821691505b602082108103614b3657614b35614adc565b5b50919050565b7f4e6f745573657200000000000000000000000000000000000000000000000000600082015250565b6000614b726007836140af565b9150614b7d82614b3c565b602082019050919050565b60006020820190508181036000830152614ba181614b65565b9050919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b6000614bde600b836140af565b9150614be982614ba8565b602082019050919050565b60006020820190508181036000830152614c0d81614bd1565b9050919050565b614c1d8161418a565b82525050565b6000604082019050614c386000830185614c14565b614c456020830184614274565b9392505050565b600081519050614c5b816143fc565b92915050565b600060208284031215614c7757614c76614160565b5b6000614c8584828501614c4c565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000614cc4600f836140af565b9150614ccf82614c8e565b602082019050919050565b60006020820190508181036000830152614cf381614cb7565b9050919050565b7f6f776e657220616c726561647920736574000000000000000000000000000000600082015250565b6000614d306011836140af565b9150614d3b82614cfa565b602082019050919050565b60006020820190508181036000830152614d5f81614d23565b9050919050565b6000606082019050614d7b6000830186614c14565b614d886020830185614c14565b614d956040830184614274565b949350505050565b6000602082019050614db26000830184614c14565b92915050565b600081519050614dc7816141d2565b92915050565b600060208284031215614de357614de2614160565b5b6000614df184828501614db8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e34826141c8565b9150614e3f836141c8565b9250828201905080821115614e5757614e56614dfa565b5b92915050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000614e93600e836140af565b9150614e9e82614e5d565b602082019050919050565b60006020820190508181036000830152614ec281614e86565b9050919050565b6000614ed4826141c8565b9150614edf836141c8565b9250828202614eed816141c8565b91508282048414831517614f0457614f03614dfa565b5b5092915050565b7f6d696e696d616c20707269636500000000000000000000000000000000000000600082015250565b6000614f41600d836140af565b9150614f4c82614f0b565b602082019050919050565b60006020820190508181036000830152614f7081614f34565b9050919050565b7f6d6178696d616c20707269636500000000000000000000000000000000000000600082015250565b6000614fad600d836140af565b9150614fb882614f77565b602082019050919050565b60006020820190508181036000830152614fdc81614fa0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061501d826141c8565b9150615028836141c8565b92508261503857615037614fe3565b5b828204905092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061507c61507761507284615043565b61429e565b61504d565b9050919050565b61508c81615061565b82525050565b60006020820190506150a76000830184615083565b92915050565b60006060820190506150c26000830186614c14565b6150cf6020830185614274565b6150dc6040830184614274565b949350505050565b60006150ef826141c8565b91506150fa836141c8565b925082820390508181111561511257615111614dfa565b5b92915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061518961518483615149565b615156565b9050919050565b6151998161418a565b82525050565b60008160a01c9050919050565b600060ff82169050919050565b60006151cc6151c78361519f565b6151ac565b9050919050565b6151dc8161423e565b82525050565b6060820160008083015490506151f781615176565b6152046000860182615190565b506001830154905061521581615176565b6152226020860182615190565b5061522c816151b9565b61523960408601826151d3565b5050505050565b600061524c83836151e2565b60608301905092915050565b6000600282019050919050565b600061527082615118565b61527a8185615123565b935061528583615134565b8060005b838110156152b5578161529c8882615240565b97506152a783615258565b925050600181019050615289565b5085935050505092915050565b60006040820190506152d76000830185614274565b81810360208301526152e98184615265565b90509392505050565b600067ffffffffffffffff82111561530d5761530c61452a565b5b602082029050602081019050919050565b600061533161532c846152f2565b61458a565b9050808382526020820190506020840283018581111561535457615353614783565b5b835b8181101561537d57806153698882614db8565b845260208401935050602081019050615356565b5050509392505050565b600082601f83011261539c5761539b614520565b5b81516153ac84826020860161531e565b91505092915050565b6000602082840312156153cb576153ca614160565b5b600082015167ffffffffffffffff8111156153e9576153e8614165565b5b6153f584828501615387565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006080820190506154426000830187614c14565b61544f6020830186614c14565b61545c604083018561424a565b6154696060830184614274565b95945050505050565b6000806040838503121561548957615488614160565b5b600061549785828601614db8565b92505060206154a885828601614db8565b9150509250929050565b6000610100820190506154c8600083018b614c14565b6154d5602083018a614c14565b6154e2604083018961424a565b6154ef6060830188614274565b6154fc6080830187614274565b61550960a0830186614274565b61551660c0830185614c14565b61552360e0830184614274565b9998505050505050505050565b600081519050919050565b6000819050602082019050919050565b6060820160008201516155616000850182615190565b5060208201516155746020850182615190565b50604082015161558760408501826151d3565b50505050565b6000615599838361554b565b60608301905092915050565b6000602082019050919050565b60006155bd82615530565b6155c78185615123565b93506155d28361553b565b8060005b838110156156035781516155ea888261558d565b97506155f5836155a5565b9250506001810190506155d6565b5085935050505092915050565b600060a0820190506156256000830188614274565b6156326020830187614274565b818103604083015261564481866155b2565b90506156536060830185614c14565b6156606080830184614274565b9695505050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026156cc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261568f565b6156d6868361568f565b95508019841693508086168417925050509392505050565b60006157096157046156ff846141c8565b61429e565b6141c8565b9050919050565b6000819050919050565b615723836156ee565b61573761572f82615710565b84845461569c565b825550505050565b600090565b61574c61573f565b61575781848461571a565b505050565b5b8181101561577b57615770600082615744565b60018101905061575d565b5050565b601f8211156157c0576157918161566a565b61579a8461567f565b810160208510156157a9578190505b6157bd6157b58561567f565b83018261575c565b50505b505050565b600082821c905092915050565b60006157e3600019846008026157c5565b1980831691505092915050565b60006157fc83836157d2565b9150826002028217905092915050565b615815826140a4565b67ffffffffffffffff81111561582e5761582d61452a565b5b6158388254614b0b565b61584382828561577f565b600060209050601f8311600181146158765760008415615864578287015190505b61586e85826157f0565b8655506158d6565b601f1984166158848661566a565b60005b828110156158ac57848901518255600182019150602085019450602081019050615887565b868310156158c957848901516158c5601f8916826157d2565b8355505b6001600288020188555050505b505050505050565b600060a0820190506158f36000830188614274565b6159006020830187614274565b81810360408301526159128186615265565b90506159216060830185614c14565b61592e6080830184614274565b9695505050505050565b600060408201905061594d6000830185614274565b61595a6020830184614c14565b9392505050565b600060a0820190506159766000830188614c14565b6159836020830187614c14565b615990604083018661424a565b61599d6060830185614274565b6159aa6080830184614274565b9695505050505050565b6000806000606084860312156159cd576159cc614160565b5b60006159db86828701614db8565b93505060206159ec86828701614db8565b92505060406159fd86828701614db8565b9150509250925092565b600061012082019050615a1d600083018c614c14565b615a2a602083018b614c14565b615a37604083018a61424a565b615a446060830189614274565b615a516080830188614274565b615a5e60a0830187614274565b615a6b60c0830186614274565b615a7860e0830185614c14565b615a86610100830184614274565b9a995050505050505050505056fea2646970667358221220566254ac82a58a7cba5cbac2ef64013e95cb5b1498f0e4edea2391ac0656fcf664736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "alarm(uint256,uint256)": {
        "params": {
          "maxOut": "Maximal price for the secondary -> primary conversion (e.g 1000100000000)",
          "minOut": "Minimal price for the secondary -> primary conversion (e.g 1010000000000)"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "deposit(uint256)": {
        "details": "Deposits primary token and mints this token"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "reinvest(bool,bool)": {
        "details": "it does it easy way - just exchanges everything to primary first and then runs part of deposit function"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "withdraw(uint256)": {
        "details": "Burns this token and withdraws primary investment token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "alarm(uint256,uint256)": {
        "notice": "Invoked on depeg of the stablecoin"
      },
      "calculateValue(address)": {
        "notice": "calculates value for the wallet denominated in primary tokens"
      },
      "depositPooledLiquidity(uint256)": {
        "notice": "Deposit pooled liquidity (pair)"
      },
      "getRewardsValue()": {
        "notice": "Calculate total value of the rewards accumulated"
      },
      "reinvest(bool,bool)": {
        "notice": "Reinvests everything's owned into DEX (including rewards)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1982,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "primary",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 1346,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "secondary",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 1349,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "reward",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 2227,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(TokanRouter)1336"
      },
      {
        "astId": 2230,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "pair",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TokanPair)1212"
      },
      {
        "astId": 2233,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "gauge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(TokanGauge)1188"
      },
      {
        "astId": 2235,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "stable",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2237,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "decimalsA",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2241,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "rewardExchangeRoute",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Route)1221_storage)dyn_storage"
      },
      {
        "astId": 2245,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Route)1221_storage)dyn_storage": {
        "base": "t_struct(Route)1221_storage",
        "encoding": "dynamic_array",
        "label": "struct TokanRouter.Route[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(TokanGauge)1188": {
        "encoding": "inplace",
        "label": "contract TokanGauge",
        "numberOfBytes": "20"
      },
      "t_contract(TokanPair)1212": {
        "encoding": "inplace",
        "label": "contract TokanPair",
        "numberOfBytes": "20"
      },
      "t_contract(TokanRouter)1336": {
        "encoding": "inplace",
        "label": "contract TokanRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Route)1221_storage": {
        "encoding": "inplace",
        "label": "struct TokanRouter.Route",
        "members": [
          {
            "astId": 1216,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1218,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1220,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "stable",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}