{
  "address": "0x2dfc27bDB60eF93564AE967f9216f7cE8A9a10D2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_primary",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_secondary",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract TokanRouter",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "contract TokanPair",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "contract TokanGauge",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimalsA",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "stable",
                  "type": "bool"
                }
              ],
              "internalType": "struct TokanRouter.Route[]",
              "name": "rewardExchangeRoute",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TokanDexInvestment.TokanDexInvestmentConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "__TokanDexInvestment_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOut",
          "type": "uint256"
        }
      ],
      "name": "alarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "calculateValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "issued",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract TokanGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract TokanPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primary",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "reinvestSecondary",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reinvestRewards",
          "type": "bool"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardExchangeRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract TokanRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondary",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf081bb4dd107521814b4acabfeeb0d9e7899d769fe0eea55e9a8ad9599f5d9cb",
  "receipt": {
    "to": null,
    "from": "0x7E31749358659c627F7f74dD0305A0Bd84c980da",
    "contractAddress": "0x2dfc27bDB60eF93564AE967f9216f7cE8A9a10D2",
    "transactionIndex": 2,
    "gasUsed": "4636140",
    "logsBloom": "0x
    "blockHash": "0x70e48d00d51651ea9d24f806275cec091eb9c873f65d09e5dd862af03423bd37",
    "transactionHash": "0xf081bb4dd107521814b4acabfeeb0d9e7899d769fe0eea55e9a8ad9599f5d9cb",
    "logs": [],
    "blockNumber": 9339061,
    "cumulativeGasUsed": "5099010",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "2775d520038b4ddc644b3350a8038fff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_primary\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_secondary\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract TokanRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract TokanPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract TokanGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimalsA\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct TokanRouter.Route[]\",\"name\":\"rewardExchangeRoute\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokanDexInvestment.TokanDexInvestmentConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"__TokanDexInvestment_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOut\",\"type\":\"uint256\"}],\"name\":\"alarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"calculateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract TokanGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract TokanPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reinvestSecondary\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reinvestRewards\",\"type\":\"bool\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardExchangeRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract TokanRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondary\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"alarm(uint256,uint256)\":{\"params\":{\"maxOut\":\"Maximal price for the secondary -> primary conversion (e.g 997000000000)\",\"minOut\":\"Minimal price for the secondary -> primary conversion (e.g 990000000000)\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"deposit(uint256)\":{\"details\":\"Deposits primary token and issues this token\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"reinvest(bool,bool)\":{\"details\":\"it does it easy way - just exchanges everything to primary first and then runs part of deposit function\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256)\":{\"details\":\"Burns this token and withdraws primary investment token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"alarm(uint256,uint256)\":{\"notice\":\"Invoked on depeg of the stablecoin\"},\"calculateValue(address)\":{\"notice\":\"calculates value for the wallet denominated in primary tokens\"},\"reinvest(bool,bool)\":{\"notice\":\"Reinvests everything's owned into DEX (including rewards)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/TokanDexInvestment.sol\":\"TokanDexInvestment\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/interfaces/tokan/TokanGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokanGauge {\\n    function getReward() external;\\n    function earned(address account) external view returns (uint256);\\n    function deposit(uint256 amount) external;\\n    function balanceOf(address _account) external view returns (uint);\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5c74e2027b839505d5571b9bf21d7a081457337ce1e9923a1bf595aa7b9036ed\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/tokan/TokanPair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokanPair is IERC20 {\\n\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe13c4d7fc226a26ae8e7f561a409ce1f4d40cad0e6d151b8d1d21aa84796080e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/tokan/TokanRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface TokanRouter {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin, Route[] calldata routes,address to,uint deadline) external returns (uint[] memory amounts);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity\\n    ) external view returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\",\"keccak256\":\"0x3a9d437f1b8cd5c9e0c12787414ffa533d105ed589c20c76434b9511c91b029c\",\"license\":\"UNLICENSED\"},\"contracts/v2/DexInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Investment.sol\\\";\\n\\n/// @notice Represents on-chain DEX investment (in liquidity pair)\\nabstract contract DexInvestment is Investment {\\n    IERC20 public secondary;\\n    IERC20 public reward;\\n\\n    function __DexInvestment_init_unchained(IERC20 _secondary, IERC20 _reward) internal onlyInitializing {\\n        secondary = _secondary;\\n        reward = _reward;\\n    }\\n\\n    /// @notice Adds liquidity to DEX pair: calculates amount to exchange, then adds liqudity on both sides\\n    /// @param amount Amount of primary token to deposit\\n    /// @return toMint Number of tokens to be minted after depositing funds\\n    function _deposit(uint amount) internal override returns (uint toMint) {\\n        (uint dA, uint B) = _depositToDex(amount);\\n\\n        uint _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            toMint = amount * 10 ** 18/ _getDecimalsA();\\n        } else {\\n            _getAllRewards();\\n\\n            uint totalValue = _calculateTotalValue();\\n\\n            /// @dev calculating deposited assets value\\n            uint depositedValue = (amount - dA) + _getPrimaryOut(B);\\n            toMint = depositedValue * totalSupply() / (totalValue - depositedValue);\\n        }\\n    }\\n\\n    // @notice Prepares withdrawal of the liquidity. Takes proportionally all values from: owned assets, invested, rewards\\n    function _prepareWithdraw(uint amount, uint totalSupply) internal override returns (uint readyToWithdraw) {\\n        uint userA = primary.balanceOf(address(this)) * amount / totalSupply;\\n        uint userB = secondary.balanceOf(address(this)) * amount / totalSupply;\\n        (uint amountA, uint amountB) = _withdrawFromDex(amount, totalSupply);\\n\\n        // @dev first just sum owned A and extracted from DEX liquidity\\n        readyToWithdraw = userA + amountA;\\n        // @dev then exchange secondary to primary and add it as well\\n        readyToWithdraw += _exchangeSecondary(userB + amountB);\\n\\n        if (address(reward) != 0x0000000000000000000000000000000000000000) {\\n            _receiveRewards();\\n            uint rewards = reward.balanceOf(address(this));\\n            uint userRewards = rewards * amount / totalSupply;\\n            readyToWithdraw += _exchangeRewards(userRewards);\\n        }\\n    }\\n\\n    /// @notice Reinvests everything's owned into DEX (including rewards)\\n    /// @dev it does it easy way - just exchanges everything to primary first and then runs part of deposit function\\n    function reinvest(bool reinvestSecondary, bool reinvestRewards) external {\\n        if (reinvestSecondary) {\\n            uint ownedB = secondary.balanceOf(address(this));\\n            _exchangeSecondary(ownedB);\\n        }\\n\\n        if (reinvestRewards && address(reward) != 0x0000000000000000000000000000000000000000) {\\n            _receiveRewards();\\n            uint rewards = reward.balanceOf(address(this));\\n\\n            if (rewards != 0) {\\n                _exchangeRewards(rewards);\\n            }\\n        }\\n\\n        uint amount = primary.balanceOf(address(this));\\n        _depositToDex(amount);\\n    }\\n\\n    function _depositToDex(uint amount) internal returns (uint dA, uint B) {\\n        if (amount != 0) {\\n            dA = _calculateDeltaA(amount);\\n\\n            /// @dev B = amount of secondary tokens which are exchanged\\n            B = _exchangePrimary(dA);\\n\\n            /// @dev put into the liquidity pool\\n            _putIntoDex(amount - dA, B);\\n        } else {\\n            dA = 0;\\n            B = 0;\\n        }\\n    }\\n\\n    function _calculateTotalValue() internal view override returns (uint total) {\\n        (uint amountA, uint amountB, uint rewards) = _calculateAllAssets();\\n        total = amountA + _getPrimaryOut(amountB) + _getRewardValue(rewards);\\n    }\\n\\n    /// @dev Calculates all assets owned by the contract\\n    function _calculateAllAssets() internal view returns (uint amountA, uint amountB, uint rewards) {\\n        uint ownedA = primary.balanceOf(address(this));\\n        uint ownedB = secondary.balanceOf(address(this));\\n        (uint investedA, uint investedB) = _getDexLiquidity();\\n        (uint ownedRewards, uint unclaimedRewards) = _getAllRewards();\\n        amountA = ownedA + investedA;\\n        amountB = ownedB + investedB;\\n        rewards = ownedRewards + unclaimedRewards;\\n    }\\n\\n    /// @notice Calculates A to exchange to B to add as DEX liquidity\\n    /// @dev This function works under assumption that deposited liquidity is too small to change balance of reserves\\n    /// @dev Definitions: Ra = Reserves of A(primary), Rb = Reserves of B(secondary), X = amount, dX = X to exchange\\n    /// @dev P = amount out for B (if amount of A = 1) (So P = Price)\\n    /// @dev this holds: Ra/Rb = (A - dA) / dA * P\\n    /// @dev In the result dA = A * Rb / (Ra * P + Rb)\\n    function _calculateDeltaA(uint A) internal view returns (uint dA) {\\n        uint decimalsA = _getDecimalsA();\\n        uint P = _getSecondaryOut(decimalsA);\\n        (uint Ra, uint Rb) = _getReserves();\\n        return A * Rb / (Ra * P / decimalsA + Rb);\\n    }\\n\\n    /// @notice Gets rewards (owned and unclaimed)\\n    function _getAllRewards() internal view returns (uint owned, uint unclaimed) {\\n        if (address(reward) == 0x0000000000000000000000000000000000000000) {\\n            owned = 0;\\n            unclaimed = 0;\\n        } else {\\n            owned = reward.balanceOf(address(this));\\n            unclaimed = _getRewards();\\n        }\\n    }\\n\\n    /// @notice Gets reserves for both assets in the pool\\n    function _getReserves() internal virtual view returns (uint reserveA, uint reserveB);\\n\\n    /// @notice Gets 10**decimals for primary asset\\n    function _getDecimalsA() internal view virtual returns (uint decimalsA);\\n\\n    /// @notice Calculates how much secondary tokens will be returned if primaryAmount exchanged\\n    function _getSecondaryOut(uint primaryAmount) internal view virtual returns (uint secondaryAmount);\\n\\n    /// @notice Calculates how much primary tokens will be returned if secondaryAmount exchanged\\n    function _getPrimaryOut(uint secondaryAmount) internal view virtual returns (uint primaryAmount);\\n\\n    /// @notice Calculates how much primary tokens will be returned if reward exchanged\\n    function _getRewardValue(uint rewardAmount) internal view virtual returns (uint primaryAmount);\\n\\n    /// @notice Exchanges primary token and gets secondary token\\n    function _exchangePrimary(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeSecondary(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeRewards(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getDexLiquidity() internal view virtual returns (uint amountA, uint amountB);\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getRewards() internal view virtual returns (uint amount);\\n\\n    /// @notice Receives rewards and transfers them to this smart-contract\\n    function _receiveRewards() internal virtual;\\n\\n    /// @notice Adds liquidity into DEX pool\\n    function _putIntoDex(uint amountA, uint amountB) internal virtual returns (uint resultA, uint resultB);\\n\\n    /// @notice Removes part of the liquidity from DEX (amount/totalSupply)\\n    function _withdrawFromDex(uint amount, uint totalSupply) internal virtual returns (uint amountA, uint amountB);\\n}\\n\",\"keccak256\":\"0x4a3ede426979f4df469b0f48aa3ce64a0131cea75570d308cc3e620248b3d651\",\"license\":\"UNLICENSED\"},\"contracts/v2/Investment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @dev Represents on-chain investment. This covers any investment where you deposit single token -> you get another ERC-20 in return.\\n/// @dev Later you can redeem original investment token\\nabstract contract Investment is ERC20Upgradeable {\\n\\n    IERC20 public primary;\\n\\n    function __SingleTokenInvestment_init_unchained(IERC20 _primary) internal onlyInitializing {\\n        primary = _primary;\\n    }\\n\\n    /// @notice calculates value for the wallet denominated in primary tokens\\n    function calculateValue(address wallet) public view returns (uint value) {\\n        uint _totalSupply = totalSupply();\\n        uint _balance = balanceOf(wallet);\\n        uint _totalValue = _calculateTotalValue();\\n        return _totalValue * _balance / _totalSupply;\\n    }\\n\\n    /// @notice Calculates total assets denominated in primary tokens\\n    function _calculateTotalValue() internal view virtual returns (uint total);\\n\\n    /// @dev Deposits primary token and issues this token\\n    function deposit(uint amount) external returns (uint issued) {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(primary.transferFrom(_msgSender(), address(this), amount), \\\"Transfer failed\\\");\\n        uint toMint = _deposit(amount);\\n        _mint(_msgSender(), toMint);\\n        return toMint;\\n    }\\n\\n    /// @dev Burns this token and withdraws primary investment token\\n    function withdraw(uint amount) external returns (uint withdrawn) {\\n        require(amount > 0, \\\"Zero amount\\\");\\n\\n        uint _totalSupply = totalSupply();\\n        _burn(_msgSender(), amount);\\n\\n        uint toWithdraw = _prepareWithdraw(amount, _totalSupply);\\n        require(primary.transfer(_msgSender(), toWithdraw), \\\"Transfer failed\\\");\\n        return toWithdraw;\\n    }\\n\\n    /// @dev Prepares liquidity to be withdrawn. Returns amount of tokens to withdraw\\n    function _prepareWithdraw(uint amount, uint totalSupply) internal virtual returns (uint readyToWithdraw);\\n\\n    function _deposit(uint amount) internal virtual returns (uint toMint);\\n}\\n\",\"keccak256\":\"0x78acd2ffb627335db38a6e05363d310427eeff328ff38d7a0359d1f5f80d244f\",\"license\":\"UNLICENSED\"},\"contracts/v2/TokanDexInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DexInvestment.sol\\\";\\nimport \\\"../interfaces/tokan/TokanPair.sol\\\";\\nimport \\\"../interfaces/tokan/TokanRouter.sol\\\";\\nimport \\\"../interfaces/tokan/TokanGauge.sol\\\";\\n\\ncontract TokanDexInvestment is DexInvestment {\\n    TokanRouter public router;\\n    TokanPair public pair;\\n    TokanGauge public gauge;\\n    bool public stable;\\n    uint private decimalsA;\\n    TokanRouter.Route[] public rewardExchangeRoute;\\n\\n    struct TokanDexInvestmentConfig {\\n        TokanRouter router;\\n        TokanPair pair;\\n        TokanGauge gauge;\\n        uint decimalsA;\\n        bool stable;\\n        TokanRouter.Route[] rewardExchangeRoute;\\n    }\\n\\n    uint constant private UINT_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    function __TokanDexInvestment_init(string memory name_, string memory symbol_, IERC20 _primary, IERC20 _secondary, IERC20 _reward, TokanDexInvestmentConfig memory config) initializer external {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n        __SingleTokenInvestment_init_unchained(_primary);\\n        __DexInvestment_init_unchained(_secondary, _reward);\\n        __TokanDexInvestment_init_unchained(config);\\n        approveAll();\\n    }\\n\\n    function __TokanDexInvestment_init_unchained(TokanDexInvestmentConfig memory config) internal onlyInitializing {\\n        router = config.router;\\n        pair = config.pair;\\n        gauge = config.gauge;\\n        decimalsA = config.decimalsA;\\n        stable = config.stable;\\n        for (uint i = 0; i < config.rewardExchangeRoute.length; i++) {\\n            TokanRouter.Route memory route = config.rewardExchangeRoute[i];\\n            rewardExchangeRoute.push(route);\\n        }\\n    }\\n\\n    function approveAll() public {\\n        primary.approve(address(router), UINT_MAX);\\n        secondary.approve(address(router), UINT_MAX);\\n        pair.approve(address(gauge), UINT_MAX);\\n        pair.approve(address(router), UINT_MAX);\\n        reward.approve(address(router), UINT_MAX);\\n    }\\n\\n    /// @notice Invoked on depeg of the stablecoin\\n    /// @param minOut Minimal price for the secondary -> primary conversion (e.g 990000000000)\\n    /// @param maxOut Maximal price for the secondary -> primary conversion (e.g 997000000000)\\n    function alarm(uint minOut, uint maxOut) external {\\n        _withdrawFromDex(100, 100);\\n\\n        uint amountB = secondary.balanceOf(address(this));\\n        uint amountA = _exchangeSecondary(amountB);\\n\\n        require(amountA * minOut >= amountB, \\\"minimal price\\\");\\n        require(amountA * maxOut <= amountB, \\\"maximal price\\\");\\n    }\\n\\n    /// @notice Gets reserves for both assets in the pool\\n    function _getReserves() internal override view returns (uint reserveA, uint reserveB) {\\n        (reserveA, reserveB,) = pair.getReserves();\\n    }\\n\\n    /// @notice Gets 10**decimals for primary asset\\n    function _getDecimalsA() internal view override returns (uint) {\\n        return decimalsA;\\n    }\\n\\n    /// @notice Calculates how much secondary tokens will be returned if mainAmount exchanged\\n    function _getSecondaryOut(uint mainAmount) internal view override returns (uint secondaryAmount) {\\n        return pair.getAmountOut(mainAmount, address(primary));\\n    }\\n\\n    /// @notice Calculates how much primary tokens will be returned if secondaryAmount exchanged\\n    function _getPrimaryOut(uint secondaryAmount) internal view override returns (uint primaryAmount) {\\n        return pair.getAmountOut(secondaryAmount, address(secondary));\\n    }\\n\\n    /// @notice Exchanges main and gets secondary token\\n    function _exchangePrimary(uint amount) internal override returns (uint out) {\\n        TokanRouter.Route[] memory route = new TokanRouter.Route[](1);\\n        route[0] = TokanRouter.Route({from: address(primary), to: address(secondary), stable: stable});\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _getSecondaryOut(amount), route, address(this), block.timestamp);\\n        return amounts[1];\\n    }\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeSecondary(uint amount) internal override returns (uint out) {\\n        TokanRouter.Route[] memory route = new TokanRouter.Route[](1);\\n        route[0] = TokanRouter.Route({from: address(secondary), to: address(primary), stable: stable});\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _getPrimaryOut(amount), route, address(this), block.timestamp);\\n        return amounts[1];\\n    }\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeRewards(uint amount) internal override returns (uint out) {\\n        uint _value = _getRewardValue(amount);\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _value, rewardExchangeRoute, address(this), block.timestamp);\\n        return amounts[rewardExchangeRoute.length];\\n    }\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getDexLiquidity() internal view override returns (uint amountA, uint amountB) {\\n        // @dev liquidity - total amount of Pair tokens, deposited in Gauge for this Pool\\n        // @dev potentially some amount can be owned by this contract and not in the gauge, but will always put Pair tokens into the gauge, so should not happen\\n        uint liquidity = gauge.balanceOf(address(this));\\n\\n        // @dev _balance0, _balance1 - how much primary and secondary tokens pair owns (total DEX liquidity)\\n        uint256 _balance0 = primary.balanceOf(address(pair));\\n        uint256 _balance1 = secondary.balanceOf(address(pair));\\n\\n        // @dev _totalSupply - how much of DEX tokens issued\\n        uint256 _totalSupply = pair.totalSupply();\\n        amountA = (liquidity * _balance0) / _totalSupply;\\n        amountB = (liquidity * _balance1) / _totalSupply;\\n    }\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getRewards() internal view override returns (uint amount) {\\n        return gauge.earned(address(this));\\n    }\\n\\n    /// @notice Adds liquidity into DEX pool\\n    function _putIntoDex(uint amountA, uint amountB) internal override returns (uint resultA, uint resultB) {\\n        bool _stable = stable;\\n        (uint amountAQuote, uint amountBQuote,) = router.quoteAddLiquidity(address(primary), address(secondary), _stable, amountA, amountB);\\n        (uint addedA, uint addedB, uint liquidity) = router.addLiquidity(address(primary), address(secondary), _stable, amountAQuote, amountBQuote, amountAQuote, amountBQuote, address(this), block.timestamp);\\n\\n        resultA = addedA;\\n        resultB = addedB;\\n\\n        gauge.deposit(liquidity);\\n    }\\n\\n    /// @notice Calculates how much primary tokens will be returned if reward exchanged\\n    function _getRewardValue(uint rewardAmount) internal view override returns (uint primaryAmount) {\\n        uint[] memory amounts = router.getAmountsOut(rewardAmount, rewardExchangeRoute);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /// @notice Receives rewards and transfers them to this smart-contract\\n    function _receiveRewards() internal override {\\n        gauge.getReward();\\n    }\\n\\n    /// @notice Removes part of the liquidity from DEX (amount/totalSupply)\\n    function _withdrawFromDex(uint amount, uint totalSupply) internal override returns (uint amountA, uint amountB) {\\n        uint toWithdraw = gauge.balanceOf(address(this)) * amount / totalSupply;\\n        gauge.withdraw(toWithdraw);\\n        (uint quoteA, uint quoteB) = router.quoteRemoveLiquidity(address(primary), address(secondary), stable, toWithdraw);\\n        (uint withdrawnA, uint withdrawnB) = router.removeLiquidity(address(primary), address(secondary), stable, toWithdraw, quoteA, quoteB, address(this), block.timestamp);\\n        amountA = withdrawnA;\\n        amountB = withdrawnB;\\n    }\\n}\\n\",\"keccak256\":\"0x7b77929c843cb55355e422006d6ca13f0f7aa5c5ed8396094dce6a0984928345\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061530e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639d3c8cc4116100c3578063b6b55f251161007c578063b6b55f25146103cd578063b7ae7e39146103fd578063c6dbdf6114610419578063dd62ed3e14610437578063e598bbf614610467578063f887ea401461049957610158565b80639d3c8cc4146102f7578063a6f19c8414610315578063a8aa1b3114610333578063a9059cbb14610351578063af79b2a614610381578063b4d8b8c8146103b157610158565b80632e1a7d4d116101155780632e1a7d4d14610235578063313ce56714610265578063380d0c081461028357806370a082311461028d5780637b634b01146102bd57806395d89b41146102d957610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab578063228cb733146101c957806322be3de1146101e757806323b872dd14610205575b600080fd5b6101656104b7565b6040516101729190613ac5565b60405180910390f35b61019560048036038101906101909190613b8f565b610558565b6040516101a29190613bea565b60405180910390f35b6101b361057b565b6040516101c09190613c14565b60405180910390f35b6101d1610593565b6040516101de9190613c8e565b60405180910390f35b6101ef6105b9565b6040516101fc9190613bea565b60405180910390f35b61021f600480360381019061021a9190613ca9565b6105cc565b60405161022c9190613bea565b60405180910390f35b61024f600480360381019061024a9190613cfc565b6105fb565b60405161025c9190613c14565b60405180910390f35b61026d610758565b60405161027a9190613d45565b60405180910390f35b61028b610761565b005b6102a760048036038101906102a29190613d60565b610bd0565b6040516102b49190613c14565b60405180910390f35b6102d760048036038101906102d29190613d8d565b610c27565b005b6102e1610d83565b6040516102ee9190613ac5565b60405180910390f35b6102ff610e24565b60405161030c9190613c8e565b60405180910390f35b61031d610e4a565b60405161032a9190613dee565b60405180910390f35b61033b610e70565b6040516103489190613e2a565b60405180910390f35b61036b60048036038101906103669190613b8f565b610e96565b6040516103789190613bea565b60405180910390f35b61039b60048036038101906103969190613d60565b610eb9565b6040516103a89190613c14565b60405180910390f35b6103cb60048036038101906103c69190614290565b610f00565b005b6103e760048036038101906103e29190613cfc565b6110c1565b6040516103f49190613c14565b60405180910390f35b61041760048036038101906104129190614371565b611212565b005b610421611491565b60405161042e9190613c8e565b60405180910390f35b610451600480360381019061044c91906143b1565b6114b5565b60405161045e9190613c14565b60405180910390f35b610481600480360381019061047c9190613cfc565b61154a565b60405161049093929190614400565b60405180910390f35b6104a16115d1565b6040516104ae9190614458565b60405180910390f35b606060006104c36115f7565b90508060030180546104d4906144a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610500906144a2565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505091505090565b60008061056361161f565b9050610570818585611627565b600191505092915050565b6000806105866115f7565b9050806002015491505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560149054906101000a900460ff1681565b6000806105d761161f565b90506105e4858285611639565b6105ef8585856116cd565b60019150509392505050565b600080821161063f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106369061451f565b60405180910390fd5b600061064961057b565b905061065c61065661161f565b846117c1565b60006106688483611843565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6106ae61161f565b836040518363ffffffff1660e01b81526004016106cc92919061453f565b6020604051808303816000875af11580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061457d565b61074e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610745906145f6565b60405180910390fd5b8092505050919050565b60006012905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016107fe92919061453f565b6020604051808303816000875af115801561081d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610841919061457d565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108e192919061453f565b6020604051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610924919061457d565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109c492919061453f565b6020604051808303816000875af11580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a07919061457d565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610aa792919061453f565b6020604051808303816000875af1158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea919061457d565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610b8a92919061453f565b6020604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd919061457d565b50565b600080610bdb6115f7565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b610c32606480611b2a565b50506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c919190614616565b602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190614646565b90506000610cdf82611e7e565b9050818482610cee91906146a2565b1015610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690614730565b60405180910390fd5b818382610d3c91906146a2565b1115610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d749061479c565b60405180910390fd5b50505050565b60606000610d8f6115f7565b9050806004018054610da0906144a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dcc906144a2565b8015610e195780601f10610dee57610100808354040283529160200191610e19565b820191906000526020600020905b815481529060010190602001808311610dfc57829003601f168201915b505050505091505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ea161161f565b9050610eae8185856116cd565b600191505092915050565b600080610ec461057b565b90506000610ed184610bd0565b90506000610edd61206d565b9050828282610eec91906146a2565b610ef691906147eb565b9350505050919050565b6000610f0a6120b0565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610f585750825b9050600060018367ffffffffffffffff16148015610f8d575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610f9b575080155b15610fd2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156110225760018560000160086101000a81548160ff0219169083151502179055505b61102a6120d8565b6110348b8b6120e2565b61103d8961211f565b611047888861216a565b611050866121f8565b611058610761565b83156110b45760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516110ab919061486b565b60405180910390a15b5050505050505050505050565b6000808211611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc9061451f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd61114961161f565b30856040518463ffffffff1660e01b815260040161116993929190614886565b6020604051808303816000875af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac919061457d565b6111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e2906145f6565b60405180910390fd5b60006111f683612419565b905061120961120361161f565b826124db565b80915050919050565b81156112c4576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112759190614616565b602060405180830381865afa158015611292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b69190614646565b90506112c181611e7e565b50505b8080156113205750600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156113e25761132d61255d565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161138a9190614616565b602060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb9190614646565b9050600081146113e0576113de816125e1565b505b505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161143e9190614616565b602060405180830381865afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f9190614646565b905061148a816126c8565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806114c06115f7565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6007818154811061155a57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b6116348383836001612713565b505050565b600061164584846114b5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146116c757818110156116b7578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016116ae939291906148bd565b60405180910390fd5b6116c684848484036000612713565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361173f5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016117369190614616565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117b15760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016117a89190614616565b60405180910390fd5b6117bc8383836128f9565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118335760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161182a9190614616565b60405180910390fd5b61183f826000836128f9565b5050565b600080828460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118a19190614616565b602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190614646565b6118ec91906146a2565b6118f691906147eb565b905060008385600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119579190614616565b602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190614646565b6119a291906146a2565b6119ac91906147eb565b90506000806119bb8787611b2a565b9150915081846119cb91906148f4565b94506119e181846119dc91906148f4565b611e7e565b856119ec91906148f4565b9450600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b2057611a4c61255d565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611aa99190614616565b602060405180830381865afa158015611ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aea9190614646565b90506000878983611afb91906146a2565b611b0591906147eb565b9050611b10816125e1565b87611b1b91906148f4565b965050505b5050505092915050565b60008060008385600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b8c9190614616565b602060405180830381865afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd9190614646565b611bd791906146a2565b611be191906147eb565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401611c3e9190613c14565b600060405180830381600087803b158015611c5857600080fd5b505af1158015611c6c573d6000803e3d6000fd5b50505050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634386e63c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff16876040518563ffffffff1660e01b8152600401611d259493929190614928565b6040805180830381865afa158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d65919061496d565b91509150600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dede6c460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff1689898930426040518963ffffffff1660e01b8152600401611e269897969594939291906149ad565b60408051808303816000875af1158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e68919061496d565b9150915081965080955050505050509250929050565b600080600167ffffffffffffffff811115611e9c57611e9b613e4f565b5b604051908082528060200260200182016040528015611ed557816020015b611ec26139e6565b815260200190600190039081611eba5790505b5090506040518060600160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff16151581525081600081518110611f8657611f85614a2b565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d885611fdb87612b38565b8530426040518663ffffffff1660e01b8152600401611ffe959493929190614b69565b6000604051808303816000875af115801561201d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120469190614c86565b90508060018151811061205c5761205b614a2b565b5b602002602001015192505050919050565b60008060008061207b612c01565b92509250925061208a81612d96565b61209383612b38565b8461209e91906148f4565b6120a891906148f4565b935050505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6120e0612e6f565b565b6120ea612e6f565b60006120f46115f7565b9050828160030190816121079190614e71565b50818160040190816121199190614e71565b50505050565b612127612e6f565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612172612e6f565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b612200612e6f565b8060000151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060200151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060400151600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606001516006819055508060800151600560146101000a81548160ff02191690831515021790555060005b8160a00151518110156124155760008260a00151828151811061232157612320614a2b565b5b60200260200101519050600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555050505080806001019150506122fb565b5050565b6000806000612427846126c8565b91509150600061243561057b565b90506000810361246c57612447612eaf565b670de0b6b3a76400008661245b91906146a2565b61246591906147eb565b93506124d3565b612474612eb9565b5050600061248061206d565b9050600061248d84612b38565b85886124999190614f43565b6124a391906148f4565b905080826124b19190614f43565b6124b961057b565b826124c491906146a2565b6124ce91906147eb565b955050505b505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361254d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016125449190614616565b60405180910390fd5b612559600083836128f9565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125c757600080fd5b505af11580156125db573d6000803e3d6000fd5b50505050565b6000806125ed83612d96565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88584600730426040518663ffffffff1660e01b81526004016126559594939291906150f2565b6000604051808303816000875af1158015612674573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061269d9190614c86565b905080600780549050815181106126b7576126b6614a2b565b5b602002602001015192505050919050565b60008060008314612705576126dc83612fcc565b91506126e782613038565b90506126fe82846126f89190614f43565b82613227565b505061270e565b60009150600090505b915091565b600061271d6115f7565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036127915760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016127889190614616565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036128035760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016127fa9190614616565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081156128f2578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516128e99190613c14565b60405180910390a35b5050505050565b60006129036115f7565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612959578181600201600082825461294d91906148f4565b92505081905550612a32565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156129e8578481846040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016129df939291906148bd565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a7d57818160020160008282540392505081905550612acd565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b2a9190613c14565b60405180910390a350505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a83600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401612bb992919061514c565b602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa9190614646565b9050919050565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612c609190614616565b602060405180830381865afa158015612c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca19190614646565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612d009190614616565b602060405180830381865afa158015612d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d419190614646565b9050600080612d4e6134c7565b91509150600080612d5d612eb9565b915091508386612d6d91906148f4565b98508285612d7b91906148f4565b97508082612d8991906148f4565b9650505050505050909192565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639881fcb48460076040518363ffffffff1660e01b8152600401612df7929190615175565b600060405180830381865afa158015612e14573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e3d9190614c86565b90508060018251612e4e9190614f43565b81518110612e5f57612e5e614a2b565b5b6020026020010151915050919050565b612e776137bc565b612ead576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600654905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612f1f576000915060009050612fc8565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f7a9190614616565b602060405180830381865afa158015612f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbb9190614646565b9150612fc56137dc565b90505b9091565b600080612fd7612eaf565b90506000612fe48261387e565b9050600080612ff1613945565b915091508084848461300391906146a2565b61300d91906147eb565b61301791906148f4565b818761302391906146a2565b61302d91906147eb565b945050505050919050565b600080600167ffffffffffffffff81111561305657613055613e4f565b5b60405190808252806020026020018201604052801561308f57816020015b61307c6139e6565b8152602001906001900390816130745790505b509050604051806060016040528060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff161515815250816000815181106131405761313f614a2b565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d8856131958761387e565b8530426040518663ffffffff1660e01b81526004016131b8959493929190614b69565b6000604051808303816000875af11580156131d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906132009190614c86565b90508060018151811061321657613215614a2b565b5b602002602001015192505050919050565b6000806000600560149054906101000a900460ff169050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398a0fb3c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868b8b6040518663ffffffff1660e01b81526004016132e69594939291906151a5565b606060405180830381865afa158015613303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332791906151f8565b50915091506000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a47ddc360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168989898b8b30426040518a63ffffffff1660e01b81526004016133de9998979695949392919061524b565b6060604051808303816000875af11580156133fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342191906151f8565b925092509250829750819650600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b81526004016134889190613c14565b600060405180830381600087803b1580156134a257600080fd5b505af11580156134b6573d6000803e3d6000fd5b505050505050505050509250929050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016135279190614616565b602060405180830381865afa158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190614646565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016135e89190614616565b602060405180830381865afa158015613605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136299190614646565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016136aa9190614616565b602060405180830381865afa1580156136c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136eb9190614646565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561375c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137809190614646565b905080838561378f91906146a2565b61379991906147eb565b95508082856137a891906146a2565b6137b291906147eb565b9450505050509091565b60006137c66120b0565b60000160089054906101000a900460ff16905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b81526004016138389190614616565b602060405180830381865afa158015613855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138799190614646565b905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016138fd92919061514c565b602060405180830381865afa15801561391a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393e9190614646565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156139b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d991906151f8565b5080925081935050509091565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a6f578082015181840152602081019050613a54565b60008484015250505050565b6000601f19601f8301169050919050565b6000613a9782613a35565b613aa18185613a40565b9350613ab1818560208601613a51565b613aba81613a7b565b840191505092915050565b60006020820190508181036000830152613adf8184613a8c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613b2682613afb565b9050919050565b613b3681613b1b565b8114613b4157600080fd5b50565b600081359050613b5381613b2d565b92915050565b6000819050919050565b613b6c81613b59565b8114613b7757600080fd5b50565b600081359050613b8981613b63565b92915050565b60008060408385031215613ba657613ba5613af1565b5b6000613bb485828601613b44565b9250506020613bc585828601613b7a565b9150509250929050565b60008115159050919050565b613be481613bcf565b82525050565b6000602082019050613bff6000830184613bdb565b92915050565b613c0e81613b59565b82525050565b6000602082019050613c296000830184613c05565b92915050565b6000819050919050565b6000613c54613c4f613c4a84613afb565b613c2f565b613afb565b9050919050565b6000613c6682613c39565b9050919050565b6000613c7882613c5b565b9050919050565b613c8881613c6d565b82525050565b6000602082019050613ca36000830184613c7f565b92915050565b600080600060608486031215613cc257613cc1613af1565b5b6000613cd086828701613b44565b9350506020613ce186828701613b44565b9250506040613cf286828701613b7a565b9150509250925092565b600060208284031215613d1257613d11613af1565b5b6000613d2084828501613b7a565b91505092915050565b600060ff82169050919050565b613d3f81613d29565b82525050565b6000602082019050613d5a6000830184613d36565b92915050565b600060208284031215613d7657613d75613af1565b5b6000613d8484828501613b44565b91505092915050565b60008060408385031215613da457613da3613af1565b5b6000613db285828601613b7a565b9250506020613dc385828601613b7a565b9150509250929050565b6000613dd882613c5b565b9050919050565b613de881613dcd565b82525050565b6000602082019050613e036000830184613ddf565b92915050565b6000613e1482613c5b565b9050919050565b613e2481613e09565b82525050565b6000602082019050613e3f6000830184613e1b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613e8782613a7b565b810181811067ffffffffffffffff82111715613ea657613ea5613e4f565b5b80604052505050565b6000613eb9613ae7565b9050613ec58282613e7e565b919050565b600067ffffffffffffffff821115613ee557613ee4613e4f565b5b613eee82613a7b565b9050602081019050919050565b82818337600083830152505050565b6000613f1d613f1884613eca565b613eaf565b905082815260208101848484011115613f3957613f38613e4a565b5b613f44848285613efb565b509392505050565b600082601f830112613f6157613f60613e45565b5b8135613f71848260208601613f0a565b91505092915050565b6000613f8582613b1b565b9050919050565b613f9581613f7a565b8114613fa057600080fd5b50565b600081359050613fb281613f8c565b92915050565b600080fd5b600080fd5b6000613fcd82613b1b565b9050919050565b613fdd81613fc2565b8114613fe857600080fd5b50565b600081359050613ffa81613fd4565b92915050565b600061400b82613b1b565b9050919050565b61401b81614000565b811461402657600080fd5b50565b60008135905061403881614012565b92915050565b600061404982613b1b565b9050919050565b6140598161403e565b811461406457600080fd5b50565b60008135905061407681614050565b92915050565b61408581613bcf565b811461409057600080fd5b50565b6000813590506140a28161407c565b92915050565b600067ffffffffffffffff8211156140c3576140c2613e4f565b5b602082029050602081019050919050565b600080fd5b6000606082840312156140ef576140ee613fb8565b5b6140f96060613eaf565b9050600061410984828501613b44565b600083015250602061411d84828501613b44565b602083015250604061413184828501614093565b60408301525092915050565b600061415061414b846140a8565b613eaf565b90508083825260208201905060608402830185811115614173576141726140d4565b5b835b8181101561419c578061418888826140d9565b845260208401935050606081019050614175565b5050509392505050565b600082601f8301126141bb576141ba613e45565b5b81356141cb84826020860161413d565b91505092915050565b600060c082840312156141ea576141e9613fb8565b5b6141f460c0613eaf565b9050600061420484828501613feb565b600083015250602061421884828501614029565b602083015250604061422c84828501614067565b604083015250606061424084828501613b7a565b606083015250608061425484828501614093565b60808301525060a082013567ffffffffffffffff81111561427857614277613fbd565b5b614284848285016141a6565b60a08301525092915050565b60008060008060008060c087890312156142ad576142ac613af1565b5b600087013567ffffffffffffffff8111156142cb576142ca613af6565b5b6142d789828a01613f4c565b965050602087013567ffffffffffffffff8111156142f8576142f7613af6565b5b61430489828a01613f4c565b955050604061431589828a01613fa3565b945050606061432689828a01613fa3565b935050608061433789828a01613fa3565b92505060a087013567ffffffffffffffff81111561435857614357613af6565b5b61436489828a016141d4565b9150509295509295509295565b6000806040838503121561438857614387613af1565b5b600061439685828601614093565b92505060206143a785828601614093565b9150509250929050565b600080604083850312156143c8576143c7613af1565b5b60006143d685828601613b44565b92505060206143e785828601613b44565b9150509250929050565b6143fa81613b1b565b82525050565b600060608201905061441560008301866143f1565b61442260208301856143f1565b61442f6040830184613bdb565b949350505050565b600061444282613c5b565b9050919050565b61445281614437565b82525050565b600060208201905061446d6000830184614449565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806144ba57607f821691505b6020821081036144cd576144cc614473565b5b50919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b6000614509600b83613a40565b9150614514826144d3565b602082019050919050565b60006020820190508181036000830152614538816144fc565b9050919050565b600060408201905061455460008301856143f1565b6145616020830184613c05565b9392505050565b6000815190506145778161407c565b92915050565b60006020828403121561459357614592613af1565b5b60006145a184828501614568565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006145e0600f83613a40565b91506145eb826145aa565b602082019050919050565b6000602082019050818103600083015261460f816145d3565b9050919050565b600060208201905061462b60008301846143f1565b92915050565b60008151905061464081613b63565b92915050565b60006020828403121561465c5761465b613af1565b5b600061466a84828501614631565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006146ad82613b59565b91506146b883613b59565b92508282026146c681613b59565b915082820484148315176146dd576146dc614673565b5b5092915050565b7f6d696e696d616c20707269636500000000000000000000000000000000000000600082015250565b600061471a600d83613a40565b9150614725826146e4565b602082019050919050565b600060208201905081810360008301526147498161470d565b9050919050565b7f6d6178696d616c20707269636500000000000000000000000000000000000000600082015250565b6000614786600d83613a40565b915061479182614750565b602082019050919050565b600060208201905081810360008301526147b581614779565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147f682613b59565b915061480183613b59565b925082614811576148106147bc565b5b828204905092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061485561485061484b8461481c565b613c2f565b614826565b9050919050565b6148658161483a565b82525050565b6000602082019050614880600083018461485c565b92915050565b600060608201905061489b60008301866143f1565b6148a860208301856143f1565b6148b56040830184613c05565b949350505050565b60006060820190506148d260008301866143f1565b6148df6020830185613c05565b6148ec6040830184613c05565b949350505050565b60006148ff82613b59565b915061490a83613b59565b925082820190508082111561492257614921614673565b5b92915050565b600060808201905061493d60008301876143f1565b61494a60208301866143f1565b6149576040830185613bdb565b6149646060830184613c05565b95945050505050565b6000806040838503121561498457614983613af1565b5b600061499285828601614631565b92505060206149a385828601614631565b9150509250929050565b6000610100820190506149c3600083018b6143f1565b6149d0602083018a6143f1565b6149dd6040830189613bdb565b6149ea6060830188613c05565b6149f76080830187613c05565b614a0460a0830186613c05565b614a1160c08301856143f1565b614a1e60e0830184613c05565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614a8f81613b1b565b82525050565b614a9e81613bcf565b82525050565b606082016000820151614aba6000850182614a86565b506020820151614acd6020850182614a86565b506040820151614ae06040850182614a95565b50505050565b6000614af28383614aa4565b60608301905092915050565b6000602082019050919050565b6000614b1682614a5a565b614b208185614a65565b9350614b2b83614a76565b8060005b83811015614b5c578151614b438882614ae6565b9750614b4e83614afe565b925050600181019050614b2f565b5085935050505092915050565b600060a082019050614b7e6000830188613c05565b614b8b6020830187613c05565b8181036040830152614b9d8186614b0b565b9050614bac60608301856143f1565b614bb96080830184613c05565b9695505050505050565b600067ffffffffffffffff821115614bde57614bdd613e4f565b5b602082029050602081019050919050565b6000614c02614bfd84614bc3565b613eaf565b90508083825260208201905060208402830185811115614c2557614c246140d4565b5b835b81811015614c4e5780614c3a8882614631565b845260208401935050602081019050614c27565b5050509392505050565b600082601f830112614c6d57614c6c613e45565b5b8151614c7d848260208601614bef565b91505092915050565b600060208284031215614c9c57614c9b613af1565b5b600082015167ffffffffffffffff811115614cba57614cb9613af6565b5b614cc684828501614c58565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614d317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614cf4565b614d3b8683614cf4565b95508019841693508086168417925050509392505050565b6000614d6e614d69614d6484613b59565b613c2f565b613b59565b9050919050565b6000819050919050565b614d8883614d53565b614d9c614d9482614d75565b848454614d01565b825550505050565b600090565b614db1614da4565b614dbc818484614d7f565b505050565b5b81811015614de057614dd5600082614da9565b600181019050614dc2565b5050565b601f821115614e2557614df681614ccf565b614dff84614ce4565b81016020851015614e0e578190505b614e22614e1a85614ce4565b830182614dc1565b50505b505050565b600082821c905092915050565b6000614e4860001984600802614e2a565b1980831691505092915050565b6000614e618383614e37565b9150826002028217905092915050565b614e7a82613a35565b67ffffffffffffffff811115614e9357614e92613e4f565b5b614e9d82546144a2565b614ea8828285614de4565b600060209050601f831160018114614edb5760008415614ec9578287015190505b614ed38582614e55565b865550614f3b565b601f198416614ee986614ccf565b60005b82811015614f1157848901518255600182019150602085019450602081019050614eec565b86831015614f2e5784890151614f2a601f891682614e37565b8355505b6001600288020188555050505b505050505050565b6000614f4e82613b59565b9150614f5983613b59565b9250828203905081811115614f7157614f70614673565b5b92915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614fd7614fd283614f97565b614fa4565b9050919050565b60008160a01c9050919050565b600060ff82169050919050565b600061500b61500683614fde565b614feb565b9050919050565b60608201600080830154905061502781614fc4565b6150346000860182614a86565b506001830154905061504581614fc4565b6150526020860182614a86565b5061505c81614ff8565b6150696040860182614a95565b5050505050565b600061507c8383615012565b60608301905092915050565b6000600282019050919050565b60006150a082614f77565b6150aa8185614a65565b93506150b583614f82565b8060005b838110156150e557816150cc8882615070565b97506150d783615088565b9250506001810190506150b9565b5085935050505092915050565b600060a0820190506151076000830188613c05565b6151146020830187613c05565b81810360408301526151268186615095565b905061513560608301856143f1565b6151426080830184613c05565b9695505050505050565b60006040820190506151616000830185613c05565b61516e60208301846143f1565b9392505050565b600060408201905061518a6000830185613c05565b818103602083015261519c8184615095565b90509392505050565b600060a0820190506151ba60008301886143f1565b6151c760208301876143f1565b6151d46040830186613bdb565b6151e16060830185613c05565b6151ee6080830184613c05565b9695505050505050565b60008060006060848603121561521157615210613af1565b5b600061521f86828701614631565b935050602061523086828701614631565b925050604061524186828701614631565b9150509250925092565b600061012082019050615261600083018c6143f1565b61526e602083018b6143f1565b61527b604083018a613bdb565b6152886060830189613c05565b6152956080830188613c05565b6152a260a0830187613c05565b6152af60c0830186613c05565b6152bc60e08301856143f1565b6152ca610100830184613c05565b9a995050505050505050505056fea264697066735822122009f15bc9b008f02ad3cd49e47dab19a103b39cc10feabffba806f970de0f020564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80639d3c8cc4116100c3578063b6b55f251161007c578063b6b55f25146103cd578063b7ae7e39146103fd578063c6dbdf6114610419578063dd62ed3e14610437578063e598bbf614610467578063f887ea401461049957610158565b80639d3c8cc4146102f7578063a6f19c8414610315578063a8aa1b3114610333578063a9059cbb14610351578063af79b2a614610381578063b4d8b8c8146103b157610158565b80632e1a7d4d116101155780632e1a7d4d14610235578063313ce56714610265578063380d0c081461028357806370a082311461028d5780637b634b01146102bd57806395d89b41146102d957610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab578063228cb733146101c957806322be3de1146101e757806323b872dd14610205575b600080fd5b6101656104b7565b6040516101729190613ac5565b60405180910390f35b61019560048036038101906101909190613b8f565b610558565b6040516101a29190613bea565b60405180910390f35b6101b361057b565b6040516101c09190613c14565b60405180910390f35b6101d1610593565b6040516101de9190613c8e565b60405180910390f35b6101ef6105b9565b6040516101fc9190613bea565b60405180910390f35b61021f600480360381019061021a9190613ca9565b6105cc565b60405161022c9190613bea565b60405180910390f35b61024f600480360381019061024a9190613cfc565b6105fb565b60405161025c9190613c14565b60405180910390f35b61026d610758565b60405161027a9190613d45565b60405180910390f35b61028b610761565b005b6102a760048036038101906102a29190613d60565b610bd0565b6040516102b49190613c14565b60405180910390f35b6102d760048036038101906102d29190613d8d565b610c27565b005b6102e1610d83565b6040516102ee9190613ac5565b60405180910390f35b6102ff610e24565b60405161030c9190613c8e565b60405180910390f35b61031d610e4a565b60405161032a9190613dee565b60405180910390f35b61033b610e70565b6040516103489190613e2a565b60405180910390f35b61036b60048036038101906103669190613b8f565b610e96565b6040516103789190613bea565b60405180910390f35b61039b60048036038101906103969190613d60565b610eb9565b6040516103a89190613c14565b60405180910390f35b6103cb60048036038101906103c69190614290565b610f00565b005b6103e760048036038101906103e29190613cfc565b6110c1565b6040516103f49190613c14565b60405180910390f35b61041760048036038101906104129190614371565b611212565b005b610421611491565b60405161042e9190613c8e565b60405180910390f35b610451600480360381019061044c91906143b1565b6114b5565b60405161045e9190613c14565b60405180910390f35b610481600480360381019061047c9190613cfc565b61154a565b60405161049093929190614400565b60405180910390f35b6104a16115d1565b6040516104ae9190614458565b60405180910390f35b606060006104c36115f7565b90508060030180546104d4906144a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610500906144a2565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505091505090565b60008061056361161f565b9050610570818585611627565b600191505092915050565b6000806105866115f7565b9050806002015491505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560149054906101000a900460ff1681565b6000806105d761161f565b90506105e4858285611639565b6105ef8585856116cd565b60019150509392505050565b600080821161063f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106369061451f565b60405180910390fd5b600061064961057b565b905061065c61065661161f565b846117c1565b60006106688483611843565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6106ae61161f565b836040518363ffffffff1660e01b81526004016106cc92919061453f565b6020604051808303816000875af11580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061457d565b61074e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610745906145f6565b60405180910390fd5b8092505050919050565b60006012905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016107fe92919061453f565b6020604051808303816000875af115801561081d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610841919061457d565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108e192919061453f565b6020604051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610924919061457d565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109c492919061453f565b6020604051808303816000875af11580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a07919061457d565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610aa792919061453f565b6020604051808303816000875af1158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea919061457d565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610b8a92919061453f565b6020604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd919061457d565b50565b600080610bdb6115f7565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b610c32606480611b2a565b50506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c919190614616565b602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190614646565b90506000610cdf82611e7e565b9050818482610cee91906146a2565b1015610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690614730565b60405180910390fd5b818382610d3c91906146a2565b1115610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d749061479c565b60405180910390fd5b50505050565b60606000610d8f6115f7565b9050806004018054610da0906144a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dcc906144a2565b8015610e195780601f10610dee57610100808354040283529160200191610e19565b820191906000526020600020905b815481529060010190602001808311610dfc57829003601f168201915b505050505091505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ea161161f565b9050610eae8185856116cd565b600191505092915050565b600080610ec461057b565b90506000610ed184610bd0565b90506000610edd61206d565b9050828282610eec91906146a2565b610ef691906147eb565b9350505050919050565b6000610f0a6120b0565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610f585750825b9050600060018367ffffffffffffffff16148015610f8d575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610f9b575080155b15610fd2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156110225760018560000160086101000a81548160ff0219169083151502179055505b61102a6120d8565b6110348b8b6120e2565b61103d8961211f565b611047888861216a565b611050866121f8565b611058610761565b83156110b45760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516110ab919061486b565b60405180910390a15b5050505050505050505050565b6000808211611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc9061451f565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd61114961161f565b30856040518463ffffffff1660e01b815260040161116993929190614886565b6020604051808303816000875af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac919061457d565b6111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e2906145f6565b60405180910390fd5b60006111f683612419565b905061120961120361161f565b826124db565b80915050919050565b81156112c4576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112759190614616565b602060405180830381865afa158015611292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b69190614646565b90506112c181611e7e565b50505b8080156113205750600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156113e25761132d61255d565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161138a9190614616565b602060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb9190614646565b9050600081146113e0576113de816125e1565b505b505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161143e9190614616565b602060405180830381865afa15801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f9190614646565b905061148a816126c8565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806114c06115f7565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6007818154811061155a57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b6116348383836001612713565b505050565b600061164584846114b5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146116c757818110156116b7578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016116ae939291906148bd565b60405180910390fd5b6116c684848484036000612713565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361173f5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016117369190614616565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117b15760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016117a89190614616565b60405180910390fd5b6117bc8383836128f9565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118335760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161182a9190614616565b60405180910390fd5b61183f826000836128f9565b5050565b600080828460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118a19190614616565b602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190614646565b6118ec91906146a2565b6118f691906147eb565b905060008385600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119579190614616565b602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190614646565b6119a291906146a2565b6119ac91906147eb565b90506000806119bb8787611b2a565b9150915081846119cb91906148f4565b94506119e181846119dc91906148f4565b611e7e565b856119ec91906148f4565b9450600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b2057611a4c61255d565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611aa99190614616565b602060405180830381865afa158015611ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aea9190614646565b90506000878983611afb91906146a2565b611b0591906147eb565b9050611b10816125e1565b87611b1b91906148f4565b965050505b5050505092915050565b60008060008385600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b8c9190614616565b602060405180830381865afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd9190614646565b611bd791906146a2565b611be191906147eb565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401611c3e9190613c14565b600060405180830381600087803b158015611c5857600080fd5b505af1158015611c6c573d6000803e3d6000fd5b50505050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634386e63c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff16876040518563ffffffff1660e01b8152600401611d259493929190614928565b6040805180830381865afa158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d65919061496d565b91509150600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dede6c460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff1689898930426040518963ffffffff1660e01b8152600401611e269897969594939291906149ad565b60408051808303816000875af1158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e68919061496d565b9150915081965080955050505050509250929050565b600080600167ffffffffffffffff811115611e9c57611e9b613e4f565b5b604051908082528060200260200182016040528015611ed557816020015b611ec26139e6565b815260200190600190039081611eba5790505b5090506040518060600160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff16151581525081600081518110611f8657611f85614a2b565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d885611fdb87612b38565b8530426040518663ffffffff1660e01b8152600401611ffe959493929190614b69565b6000604051808303816000875af115801561201d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120469190614c86565b90508060018151811061205c5761205b614a2b565b5b602002602001015192505050919050565b60008060008061207b612c01565b92509250925061208a81612d96565b61209383612b38565b8461209e91906148f4565b6120a891906148f4565b935050505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6120e0612e6f565b565b6120ea612e6f565b60006120f46115f7565b9050828160030190816121079190614e71565b50818160040190816121199190614e71565b50505050565b612127612e6f565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612172612e6f565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b612200612e6f565b8060000151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060200151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060400151600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606001516006819055508060800151600560146101000a81548160ff02191690831515021790555060005b8160a00151518110156124155760008260a00151828151811061232157612320614a2b565b5b60200260200101519050600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555050505080806001019150506122fb565b5050565b6000806000612427846126c8565b91509150600061243561057b565b90506000810361246c57612447612eaf565b670de0b6b3a76400008661245b91906146a2565b61246591906147eb565b93506124d3565b612474612eb9565b5050600061248061206d565b9050600061248d84612b38565b85886124999190614f43565b6124a391906148f4565b905080826124b19190614f43565b6124b961057b565b826124c491906146a2565b6124ce91906147eb565b955050505b505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361254d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016125449190614616565b60405180910390fd5b612559600083836128f9565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125c757600080fd5b505af11580156125db573d6000803e3d6000fd5b50505050565b6000806125ed83612d96565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88584600730426040518663ffffffff1660e01b81526004016126559594939291906150f2565b6000604051808303816000875af1158015612674573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061269d9190614c86565b905080600780549050815181106126b7576126b6614a2b565b5b602002602001015192505050919050565b60008060008314612705576126dc83612fcc565b91506126e782613038565b90506126fe82846126f89190614f43565b82613227565b505061270e565b60009150600090505b915091565b600061271d6115f7565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036127915760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016127889190614616565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036128035760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016127fa9190614616565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081156128f2578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516128e99190613c14565b60405180910390a35b5050505050565b60006129036115f7565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612959578181600201600082825461294d91906148f4565b92505081905550612a32565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156129e8578481846040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016129df939291906148bd565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a7d57818160020160008282540392505081905550612acd565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b2a9190613c14565b60405180910390a350505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a83600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401612bb992919061514c565b602060405180830381865afa158015612bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfa9190614646565b9050919050565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612c609190614616565b602060405180830381865afa158015612c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca19190614646565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612d009190614616565b602060405180830381865afa158015612d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d419190614646565b9050600080612d4e6134c7565b91509150600080612d5d612eb9565b915091508386612d6d91906148f4565b98508285612d7b91906148f4565b97508082612d8991906148f4565b9650505050505050909192565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639881fcb48460076040518363ffffffff1660e01b8152600401612df7929190615175565b600060405180830381865afa158015612e14573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e3d9190614c86565b90508060018251612e4e9190614f43565b81518110612e5f57612e5e614a2b565b5b6020026020010151915050919050565b612e776137bc565b612ead576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600654905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612f1f576000915060009050612fc8565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f7a9190614616565b602060405180830381865afa158015612f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbb9190614646565b9150612fc56137dc565b90505b9091565b600080612fd7612eaf565b90506000612fe48261387e565b9050600080612ff1613945565b915091508084848461300391906146a2565b61300d91906147eb565b61301791906148f4565b818761302391906146a2565b61302d91906147eb565b945050505050919050565b600080600167ffffffffffffffff81111561305657613055613e4f565b5b60405190808252806020026020018201604052801561308f57816020015b61307c6139e6565b8152602001906001900390816130745790505b509050604051806060016040528060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff161515815250816000815181106131405761313f614a2b565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d8856131958761387e565b8530426040518663ffffffff1660e01b81526004016131b8959493929190614b69565b6000604051808303816000875af11580156131d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906132009190614c86565b90508060018151811061321657613215614a2b565b5b602002602001015192505050919050565b6000806000600560149054906101000a900460ff169050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398a0fb3c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868b8b6040518663ffffffff1660e01b81526004016132e69594939291906151a5565b606060405180830381865afa158015613303573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332791906151f8565b50915091506000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a47ddc360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168989898b8b30426040518a63ffffffff1660e01b81526004016133de9998979695949392919061524b565b6060604051808303816000875af11580156133fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342191906151f8565b925092509250829750819650600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b81526004016134889190613c14565b600060405180830381600087803b1580156134a257600080fd5b505af11580156134b6573d6000803e3d6000fd5b505050505050505050509250929050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016135279190614616565b602060405180830381865afa158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190614646565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016135e89190614616565b602060405180830381865afa158015613605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136299190614646565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016136aa9190614616565b602060405180830381865afa1580156136c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136eb9190614646565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561375c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137809190614646565b905080838561378f91906146a2565b61379991906147eb565b95508082856137a891906146a2565b6137b291906147eb565b9450505050509091565b60006137c66120b0565b60000160089054906101000a900460ff16905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b81526004016138389190614616565b602060405180830381865afa158015613855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138799190614646565b905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016138fd92919061514c565b602060405180830381865afa15801561391a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393e9190614646565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156139b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d991906151f8565b5080925081935050509091565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a6f578082015181840152602081019050613a54565b60008484015250505050565b6000601f19601f8301169050919050565b6000613a9782613a35565b613aa18185613a40565b9350613ab1818560208601613a51565b613aba81613a7b565b840191505092915050565b60006020820190508181036000830152613adf8184613a8c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613b2682613afb565b9050919050565b613b3681613b1b565b8114613b4157600080fd5b50565b600081359050613b5381613b2d565b92915050565b6000819050919050565b613b6c81613b59565b8114613b7757600080fd5b50565b600081359050613b8981613b63565b92915050565b60008060408385031215613ba657613ba5613af1565b5b6000613bb485828601613b44565b9250506020613bc585828601613b7a565b9150509250929050565b60008115159050919050565b613be481613bcf565b82525050565b6000602082019050613bff6000830184613bdb565b92915050565b613c0e81613b59565b82525050565b6000602082019050613c296000830184613c05565b92915050565b6000819050919050565b6000613c54613c4f613c4a84613afb565b613c2f565b613afb565b9050919050565b6000613c6682613c39565b9050919050565b6000613c7882613c5b565b9050919050565b613c8881613c6d565b82525050565b6000602082019050613ca36000830184613c7f565b92915050565b600080600060608486031215613cc257613cc1613af1565b5b6000613cd086828701613b44565b9350506020613ce186828701613b44565b9250506040613cf286828701613b7a565b9150509250925092565b600060208284031215613d1257613d11613af1565b5b6000613d2084828501613b7a565b91505092915050565b600060ff82169050919050565b613d3f81613d29565b82525050565b6000602082019050613d5a6000830184613d36565b92915050565b600060208284031215613d7657613d75613af1565b5b6000613d8484828501613b44565b91505092915050565b60008060408385031215613da457613da3613af1565b5b6000613db285828601613b7a565b9250506020613dc385828601613b7a565b9150509250929050565b6000613dd882613c5b565b9050919050565b613de881613dcd565b82525050565b6000602082019050613e036000830184613ddf565b92915050565b6000613e1482613c5b565b9050919050565b613e2481613e09565b82525050565b6000602082019050613e3f6000830184613e1b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613e8782613a7b565b810181811067ffffffffffffffff82111715613ea657613ea5613e4f565b5b80604052505050565b6000613eb9613ae7565b9050613ec58282613e7e565b919050565b600067ffffffffffffffff821115613ee557613ee4613e4f565b5b613eee82613a7b565b9050602081019050919050565b82818337600083830152505050565b6000613f1d613f1884613eca565b613eaf565b905082815260208101848484011115613f3957613f38613e4a565b5b613f44848285613efb565b509392505050565b600082601f830112613f6157613f60613e45565b5b8135613f71848260208601613f0a565b91505092915050565b6000613f8582613b1b565b9050919050565b613f9581613f7a565b8114613fa057600080fd5b50565b600081359050613fb281613f8c565b92915050565b600080fd5b600080fd5b6000613fcd82613b1b565b9050919050565b613fdd81613fc2565b8114613fe857600080fd5b50565b600081359050613ffa81613fd4565b92915050565b600061400b82613b1b565b9050919050565b61401b81614000565b811461402657600080fd5b50565b60008135905061403881614012565b92915050565b600061404982613b1b565b9050919050565b6140598161403e565b811461406457600080fd5b50565b60008135905061407681614050565b92915050565b61408581613bcf565b811461409057600080fd5b50565b6000813590506140a28161407c565b92915050565b600067ffffffffffffffff8211156140c3576140c2613e4f565b5b602082029050602081019050919050565b600080fd5b6000606082840312156140ef576140ee613fb8565b5b6140f96060613eaf565b9050600061410984828501613b44565b600083015250602061411d84828501613b44565b602083015250604061413184828501614093565b60408301525092915050565b600061415061414b846140a8565b613eaf565b90508083825260208201905060608402830185811115614173576141726140d4565b5b835b8181101561419c578061418888826140d9565b845260208401935050606081019050614175565b5050509392505050565b600082601f8301126141bb576141ba613e45565b5b81356141cb84826020860161413d565b91505092915050565b600060c082840312156141ea576141e9613fb8565b5b6141f460c0613eaf565b9050600061420484828501613feb565b600083015250602061421884828501614029565b602083015250604061422c84828501614067565b604083015250606061424084828501613b7a565b606083015250608061425484828501614093565b60808301525060a082013567ffffffffffffffff81111561427857614277613fbd565b5b614284848285016141a6565b60a08301525092915050565b60008060008060008060c087890312156142ad576142ac613af1565b5b600087013567ffffffffffffffff8111156142cb576142ca613af6565b5b6142d789828a01613f4c565b965050602087013567ffffffffffffffff8111156142f8576142f7613af6565b5b61430489828a01613f4c565b955050604061431589828a01613fa3565b945050606061432689828a01613fa3565b935050608061433789828a01613fa3565b92505060a087013567ffffffffffffffff81111561435857614357613af6565b5b61436489828a016141d4565b9150509295509295509295565b6000806040838503121561438857614387613af1565b5b600061439685828601614093565b92505060206143a785828601614093565b9150509250929050565b600080604083850312156143c8576143c7613af1565b5b60006143d685828601613b44565b92505060206143e785828601613b44565b9150509250929050565b6143fa81613b1b565b82525050565b600060608201905061441560008301866143f1565b61442260208301856143f1565b61442f6040830184613bdb565b949350505050565b600061444282613c5b565b9050919050565b61445281614437565b82525050565b600060208201905061446d6000830184614449565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806144ba57607f821691505b6020821081036144cd576144cc614473565b5b50919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b6000614509600b83613a40565b9150614514826144d3565b602082019050919050565b60006020820190508181036000830152614538816144fc565b9050919050565b600060408201905061455460008301856143f1565b6145616020830184613c05565b9392505050565b6000815190506145778161407c565b92915050565b60006020828403121561459357614592613af1565b5b60006145a184828501614568565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006145e0600f83613a40565b91506145eb826145aa565b602082019050919050565b6000602082019050818103600083015261460f816145d3565b9050919050565b600060208201905061462b60008301846143f1565b92915050565b60008151905061464081613b63565b92915050565b60006020828403121561465c5761465b613af1565b5b600061466a84828501614631565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006146ad82613b59565b91506146b883613b59565b92508282026146c681613b59565b915082820484148315176146dd576146dc614673565b5b5092915050565b7f6d696e696d616c20707269636500000000000000000000000000000000000000600082015250565b600061471a600d83613a40565b9150614725826146e4565b602082019050919050565b600060208201905081810360008301526147498161470d565b9050919050565b7f6d6178696d616c20707269636500000000000000000000000000000000000000600082015250565b6000614786600d83613a40565b915061479182614750565b602082019050919050565b600060208201905081810360008301526147b581614779565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147f682613b59565b915061480183613b59565b925082614811576148106147bc565b5b828204905092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600061485561485061484b8461481c565b613c2f565b614826565b9050919050565b6148658161483a565b82525050565b6000602082019050614880600083018461485c565b92915050565b600060608201905061489b60008301866143f1565b6148a860208301856143f1565b6148b56040830184613c05565b949350505050565b60006060820190506148d260008301866143f1565b6148df6020830185613c05565b6148ec6040830184613c05565b949350505050565b60006148ff82613b59565b915061490a83613b59565b925082820190508082111561492257614921614673565b5b92915050565b600060808201905061493d60008301876143f1565b61494a60208301866143f1565b6149576040830185613bdb565b6149646060830184613c05565b95945050505050565b6000806040838503121561498457614983613af1565b5b600061499285828601614631565b92505060206149a385828601614631565b9150509250929050565b6000610100820190506149c3600083018b6143f1565b6149d0602083018a6143f1565b6149dd6040830189613bdb565b6149ea6060830188613c05565b6149f76080830187613c05565b614a0460a0830186613c05565b614a1160c08301856143f1565b614a1e60e0830184613c05565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614a8f81613b1b565b82525050565b614a9e81613bcf565b82525050565b606082016000820151614aba6000850182614a86565b506020820151614acd6020850182614a86565b506040820151614ae06040850182614a95565b50505050565b6000614af28383614aa4565b60608301905092915050565b6000602082019050919050565b6000614b1682614a5a565b614b208185614a65565b9350614b2b83614a76565b8060005b83811015614b5c578151614b438882614ae6565b9750614b4e83614afe565b925050600181019050614b2f565b5085935050505092915050565b600060a082019050614b7e6000830188613c05565b614b8b6020830187613c05565b8181036040830152614b9d8186614b0b565b9050614bac60608301856143f1565b614bb96080830184613c05565b9695505050505050565b600067ffffffffffffffff821115614bde57614bdd613e4f565b5b602082029050602081019050919050565b6000614c02614bfd84614bc3565b613eaf565b90508083825260208201905060208402830185811115614c2557614c246140d4565b5b835b81811015614c4e5780614c3a8882614631565b845260208401935050602081019050614c27565b5050509392505050565b600082601f830112614c6d57614c6c613e45565b5b8151614c7d848260208601614bef565b91505092915050565b600060208284031215614c9c57614c9b613af1565b5b600082015167ffffffffffffffff811115614cba57614cb9613af6565b5b614cc684828501614c58565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614d317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614cf4565b614d3b8683614cf4565b95508019841693508086168417925050509392505050565b6000614d6e614d69614d6484613b59565b613c2f565b613b59565b9050919050565b6000819050919050565b614d8883614d53565b614d9c614d9482614d75565b848454614d01565b825550505050565b600090565b614db1614da4565b614dbc818484614d7f565b505050565b5b81811015614de057614dd5600082614da9565b600181019050614dc2565b5050565b601f821115614e2557614df681614ccf565b614dff84614ce4565b81016020851015614e0e578190505b614e22614e1a85614ce4565b830182614dc1565b50505b505050565b600082821c905092915050565b6000614e4860001984600802614e2a565b1980831691505092915050565b6000614e618383614e37565b9150826002028217905092915050565b614e7a82613a35565b67ffffffffffffffff811115614e9357614e92613e4f565b5b614e9d82546144a2565b614ea8828285614de4565b600060209050601f831160018114614edb5760008415614ec9578287015190505b614ed38582614e55565b865550614f3b565b601f198416614ee986614ccf565b60005b82811015614f1157848901518255600182019150602085019450602081019050614eec565b86831015614f2e5784890151614f2a601f891682614e37565b8355505b6001600288020188555050505b505050505050565b6000614f4e82613b59565b9150614f5983613b59565b9250828203905081811115614f7157614f70614673565b5b92915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614fd7614fd283614f97565b614fa4565b9050919050565b60008160a01c9050919050565b600060ff82169050919050565b600061500b61500683614fde565b614feb565b9050919050565b60608201600080830154905061502781614fc4565b6150346000860182614a86565b506001830154905061504581614fc4565b6150526020860182614a86565b5061505c81614ff8565b6150696040860182614a95565b5050505050565b600061507c8383615012565b60608301905092915050565b6000600282019050919050565b60006150a082614f77565b6150aa8185614a65565b93506150b583614f82565b8060005b838110156150e557816150cc8882615070565b97506150d783615088565b9250506001810190506150b9565b5085935050505092915050565b600060a0820190506151076000830188613c05565b6151146020830187613c05565b81810360408301526151268186615095565b905061513560608301856143f1565b6151426080830184613c05565b9695505050505050565b60006040820190506151616000830185613c05565b61516e60208301846143f1565b9392505050565b600060408201905061518a6000830185613c05565b818103602083015261519c8184615095565b90509392505050565b600060a0820190506151ba60008301886143f1565b6151c760208301876143f1565b6151d46040830186613bdb565b6151e16060830185613c05565b6151ee6080830184613c05565b9695505050505050565b60008060006060848603121561521157615210613af1565b5b600061521f86828701614631565b935050602061523086828701614631565b925050604061524186828701614631565b9150509250925092565b600061012082019050615261600083018c6143f1565b61526e602083018b6143f1565b61527b604083018a613bdb565b6152886060830189613c05565b6152956080830188613c05565b6152a260a0830187613c05565b6152af60c0830186613c05565b6152bc60e08301856143f1565b6152ca610100830184613c05565b9a995050505050505050505056fea264697066735822122009f15bc9b008f02ad3cd49e47dab19a103b39cc10feabffba806f970de0f020564736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "alarm(uint256,uint256)": {
        "params": {
          "maxOut": "Maximal price for the secondary -> primary conversion (e.g 997000000000)",
          "minOut": "Minimal price for the secondary -> primary conversion (e.g 990000000000)"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "deposit(uint256)": {
        "details": "Deposits primary token and issues this token"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "reinvest(bool,bool)": {
        "details": "it does it easy way - just exchanges everything to primary first and then runs part of deposit function"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "withdraw(uint256)": {
        "details": "Burns this token and withdraws primary investment token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "alarm(uint256,uint256)": {
        "notice": "Invoked on depeg of the stablecoin"
      },
      "calculateValue(address)": {
        "notice": "calculates value for the wallet denominated in primary tokens"
      },
      "reinvest(bool,bool)": {
        "notice": "Reinvests everything's owned into DEX (including rewards)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1939,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "primary",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 1346,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "secondary",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 1349,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "reward",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 2108,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(TokanRouter)1336"
      },
      {
        "astId": 2111,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "pair",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TokanPair)1212"
      },
      {
        "astId": 2114,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "gauge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(TokanGauge)1188"
      },
      {
        "astId": 2116,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "stable",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2118,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "decimalsA",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2122,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "rewardExchangeRoute",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Route)1221_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Route)1221_storage)dyn_storage": {
        "base": "t_struct(Route)1221_storage",
        "encoding": "dynamic_array",
        "label": "struct TokanRouter.Route[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(TokanGauge)1188": {
        "encoding": "inplace",
        "label": "contract TokanGauge",
        "numberOfBytes": "20"
      },
      "t_contract(TokanPair)1212": {
        "encoding": "inplace",
        "label": "contract TokanPair",
        "numberOfBytes": "20"
      },
      "t_contract(TokanRouter)1336": {
        "encoding": "inplace",
        "label": "contract TokanRouter",
        "numberOfBytes": "20"
      },
      "t_struct(Route)1221_storage": {
        "encoding": "inplace",
        "label": "struct TokanRouter.Route",
        "members": [
          {
            "astId": 1216,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1218,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1220,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "stable",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}