{
  "address": "0xec65B0630E10E6E0727CAB590c655349b69b0102",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TestValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_primary",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_secondary",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract TokanRouter",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "contract TokanPair",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "contract TokanGauge",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimalsA",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "stable",
                  "type": "bool"
                }
              ],
              "internalType": "struct TokanRouter.Route[]",
              "name": "rewardExchangeRoute",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TokanDexInvestment.TokanDexInvestmentConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "__TokanDexInvestment_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "calculateValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "issued",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract TokanGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract TokanPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primary",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "reinvestSecondary",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reinvestRewards",
          "type": "bool"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardExchangeRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract TokanRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondary",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3984a52332ee4e8b025b666175f011e2df727703592fdbc89d8e53f942912fe3",
  "receipt": {
    "to": null,
    "from": "0x7E31749358659c627F7f74dD0305A0Bd84c980da",
    "contractAddress": "0xec65B0630E10E6E0727CAB590c655349b69b0102",
    "transactionIndex": 7,
    "gasUsed": "5322484",
    "logsBloom": "0x
    "blockHash": "0x9f868a02e1c41bc4f82e11a431acac6d73c627b169e92f1e9ca6a7c5eb478785",
    "transactionHash": "0x3984a52332ee4e8b025b666175f011e2df727703592fdbc89d8e53f942912fe3",
    "logs": [],
    "blockNumber": 9337665,
    "cumulativeGasUsed": "6770629",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "f3484ef81505aed5c3b06751790adb2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TestValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_primary\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_secondary\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract TokanRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract TokanPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"contract TokanGauge\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimalsA\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct TokanRouter.Route[]\",\"name\":\"rewardExchangeRoute\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokanDexInvestment.TokanDexInvestmentConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"__TokanDexInvestment_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"calculateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract TokanGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract TokanPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reinvestSecondary\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reinvestRewards\",\"type\":\"bool\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardExchangeRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract TokanRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondary\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"deposit(uint256)\":{\"details\":\"Deposits primary token and issues this token\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"reinvest(bool,bool)\":{\"details\":\"it does it easy way - just exchanges everything to primary first and then runs part of deposit function\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256)\":{\"details\":\"Burns this token and withdraws primary investment token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateValue(address)\":{\"notice\":\"calculates value for the wallet denominated in primary tokens\"},\"reinvest(bool,bool)\":{\"notice\":\"Reinvests everything's owned into DEX (including rewards)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/TokanDexInvestment.sol\":\"TokanDexInvestment\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/interfaces/tokan/TokanGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokanGauge {\\n    function getReward() external;\\n    function earned(address account) external view returns (uint256);\\n    function deposit(uint256 amount) external;\\n    function balanceOf(address _account) external view returns (uint);\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5c74e2027b839505d5571b9bf21d7a081457337ce1e9923a1bf595aa7b9036ed\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/tokan/TokanPair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokanPair is IERC20 {\\n\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe13c4d7fc226a26ae8e7f561a409ce1f4d40cad0e6d151b8d1d21aa84796080e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/tokan/TokanRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface TokanRouter {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin, Route[] calldata routes,address to,uint deadline) external returns (uint[] memory amounts);\\n\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity\\n    ) external view returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\",\"keccak256\":\"0x3a9d437f1b8cd5c9e0c12787414ffa533d105ed589c20c76434b9511c91b029c\",\"license\":\"UNLICENSED\"},\"contracts/v2/DexInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Investment.sol\\\";\\n\\n/// @notice Represents on-chain DEX investment (in liquidity pair)\\nabstract contract DexInvestment is Investment {\\n    IERC20 public secondary;\\n    IERC20 public reward;\\n\\n    function __DexInvestment_init_unchained(IERC20 _secondary, IERC20 _reward) internal onlyInitializing {\\n        secondary = _secondary;\\n        reward = _reward;\\n    }\\n\\n    /// @notice Adds liquidity to DEX pair: calculates amount to exchange, then adds liqudity on both sides\\n    /// @param amount Amount of primary token to deposit\\n    /// @return toMint Number of tokens to be minted after depositing funds\\n    function _deposit(uint amount) internal override returns (uint toMint) {\\n        (uint dA, uint B) = _depositToDex(amount);\\n\\n        uint _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            toMint = amount * 10 ** 18/ _getDecimalsA();\\n        } else {\\n            (uint ownedRewards, uint unclaimedRewards) = _getAllRewards();\\n            emit TestValue(\\\"ownedRewards\\\", ownedRewards);\\n            emit TestValue(\\\"unclaimedRewards\\\", unclaimedRewards);\\n\\n            uint totalValue = _calculateTotalValue();\\n            emit TestValue(\\\"total\\\", totalValue);\\n\\n            /// @dev calculating deposited assets value\\n            uint depositedValue = (amount - dA) + _getPrimaryOut(B);\\n            emit TestValue(\\\"deposited\\\", depositedValue);\\n            toMint = depositedValue * totalSupply() / (totalValue - depositedValue);\\n        }\\n    }\\n\\n    // @notice Prepares withdrawal of the liquidity. Takes proportionally all values from: owned assets, invested, rewards\\n    function _prepareWithdraw(uint amount, uint totalSupply) internal override returns (uint readyToWithdraw) {\\n        uint userA = primary.balanceOf(address(this)) * amount / totalSupply;\\n        uint userB = secondary.balanceOf(address(this)) * amount / totalSupply;\\n        (uint amountA, uint amountB) = _withdrawFromDex(amount, totalSupply);\\n\\n        // @dev first just sum owned A and extracted from DEX liquidity\\n        readyToWithdraw = userA + amountA;\\n        emit TestValue(\\\"ready to withdraw primary\\\", readyToWithdraw);\\n        // @dev then exchange secondary to primary and add it as well\\n        readyToWithdraw += _exchangeSecondary(userB + amountB);\\n        emit TestValue(\\\"ready to withdraw +secondary\\\", readyToWithdraw);\\n\\n        if (address(reward) != 0x0000000000000000000000000000000000000000) {\\n            emit TestValue(\\\"total rewards before\\\", reward.balanceOf(address(this)));\\n            _receiveRewards();\\n            uint rewards = reward.balanceOf(address(this));\\n            emit TestValue(\\\"total rewards\\\", rewards);\\n            uint userRewards = rewards * amount / totalSupply;\\n            readyToWithdraw += _exchangeRewards(userRewards);\\n            emit TestValue(\\\"ready to withdraw +rewards\\\", readyToWithdraw);\\n            emit TestValue(\\\"total rewards after\\\", reward.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @notice Reinvests everything's owned into DEX (including rewards)\\n    /// @dev it does it easy way - just exchanges everything to primary first and then runs part of deposit function\\n    function reinvest(bool reinvestSecondary, bool reinvestRewards) external {\\n        if (reinvestSecondary) {\\n            uint ownedB = secondary.balanceOf(address(this));\\n            _exchangeSecondary(ownedB);\\n        }\\n\\n        if (reinvestRewards && address(reward) != 0x0000000000000000000000000000000000000000) {\\n            _receiveRewards();\\n            uint rewards = reward.balanceOf(address(this));\\n\\n            if (rewards != 0) {\\n                _exchangeRewards(rewards);\\n            }\\n        }\\n\\n        uint amount = primary.balanceOf(address(this));\\n        _depositToDex(amount);\\n    }\\n\\n    function _depositToDex(uint amount) internal returns (uint dA, uint B) {\\n        if (amount != 0) {\\n            dA = _calculateDeltaA(amount);\\n\\n            /// @dev B = amount of secondary tokens which are exchanged\\n            B = _exchangePrimary(dA);\\n\\n            /// @dev put into the liquidity pool\\n            _putIntoDex(amount - dA, B);\\n        } else {\\n            dA = 0;\\n            B = 0;\\n        }\\n    }\\n\\n    function _calculateTotalValue() internal view override returns (uint total) {\\n        (uint amountA, uint amountB, uint rewards) = _calculateAllAssets();\\n        total = amountA + _getPrimaryOut(amountB) + _getRewardValue(rewards);\\n    }\\n\\n    /// @dev Calculates all assets owned by the contract\\n    function _calculateAllAssets() internal view returns (uint amountA, uint amountB, uint rewards) {\\n        uint ownedA = primary.balanceOf(address(this));\\n        uint ownedB = secondary.balanceOf(address(this));\\n        (uint investedA, uint investedB) = _getDexLiquidity();\\n        (uint ownedRewards, uint unclaimedRewards) = _getAllRewards();\\n        amountA = ownedA + investedA;\\n        amountB = ownedB + investedB;\\n        rewards = ownedRewards + unclaimedRewards;\\n    }\\n\\n    /// @notice Calculates A to exchange to B to add as DEX liquidity\\n    /// @dev This function works under assumption that deposited liquidity is too small to change balance of reserves\\n    /// @dev Definitions: Ra = Reserves of A(primary), Rb = Reserves of B(secondary), X = amount, dX = X to exchange\\n    /// @dev P = amount out for B (if amount of A = 1) (So P = Price)\\n    /// @dev this holds: Ra/Rb = (A - dA) / dA * P\\n    /// @dev In the result dA = A * Rb / (Ra * P + Rb)\\n    function _calculateDeltaA(uint A) internal view returns (uint dA) {\\n        uint decimalsA = _getDecimalsA();\\n        uint P = _getSecondaryOut(decimalsA);\\n        (uint Ra, uint Rb) = _getReserves();\\n        return A * Rb / (Ra * P / decimalsA + Rb);\\n    }\\n\\n    /// @notice Gets rewards (owned and unclaimed)\\n    function _getAllRewards() internal view returns (uint owned, uint unclaimed) {\\n        if (address(reward) == 0x0000000000000000000000000000000000000000) {\\n            owned = 0;\\n            unclaimed = 0;\\n        } else {\\n            owned = reward.balanceOf(address(this));\\n            unclaimed = _getRewards();\\n        }\\n    }\\n\\n    /// @notice Gets reserves for both assets in the pool\\n    function _getReserves() internal virtual view returns (uint reserveA, uint reserveB);\\n\\n    /// @notice Gets 10**decimals for primary asset\\n    function _getDecimalsA() internal view virtual returns (uint decimalsA);\\n\\n    /// @notice Calculates how much secondary tokens will be returned if primaryAmount exchanged\\n    function _getSecondaryOut(uint primaryAmount) internal view virtual returns (uint secondaryAmount);\\n\\n    /// @notice Calculates how much primary tokens will be returned if secondaryAmount exchanged\\n    function _getPrimaryOut(uint secondaryAmount) internal view virtual returns (uint primaryAmount);\\n\\n    /// @notice Calculates how much primary tokens will be returned if reward exchanged\\n    function _getRewardValue(uint rewardAmount) internal view virtual returns (uint primaryAmount);\\n\\n    /// @notice Exchanges primary token and gets secondary token\\n    function _exchangePrimary(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeSecondary(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeRewards(uint amount) internal virtual returns (uint out);\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getDexLiquidity() internal view virtual returns (uint amountA, uint amountB);\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getRewards() internal view virtual returns (uint amount);\\n\\n    /// @notice Receives rewards and transfers them to this smart-contract\\n    function _receiveRewards() internal virtual;\\n\\n    /// @notice Adds liquidity into DEX pool\\n    function _putIntoDex(uint amountA, uint amountB) internal virtual returns (uint resultA, uint resultB);\\n\\n    /// @notice Removes part of the liquidity from DEX (amount/totalSupply)\\n    function _withdrawFromDex(uint amount, uint totalSupply) internal virtual returns (uint amountA, uint amountB);\\n}\\n\",\"keccak256\":\"0x40dbeb60a98e421f0902a53a66a630851c02daf97c4c183354cc1b3c9d96f0d6\",\"license\":\"UNLICENSED\"},\"contracts/v2/Investment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @dev Represents on-chain investment. This covers any investment where you deposit single token -> you get another ERC-20 in return.\\n/// @dev Later you can redeem original investment token\\nabstract contract Investment is ERC20Upgradeable {\\n\\n    IERC20 public primary;\\n\\n    event TestValue(string title, uint value);\\n\\n    function __SingleTokenInvestment_init_unchained(IERC20 _primary) internal onlyInitializing {\\n        primary = _primary;\\n    }\\n\\n    /// @notice calculates value for the wallet denominated in primary tokens\\n    function calculateValue(address wallet) public view returns (uint value) {\\n        uint _totalSupply = totalSupply();\\n        uint _balance = balanceOf(wallet);\\n        uint _totalValue = _calculateTotalValue();\\n        return _totalValue * _balance / _totalSupply;\\n    }\\n\\n    /// @notice Calculates total assets denominated in primary tokens\\n    function _calculateTotalValue() internal view virtual returns (uint total);\\n\\n    /// @dev Deposits primary token and issues this token\\n    function deposit(uint amount) external returns (uint issued) {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(primary.transferFrom(_msgSender(), address(this), amount), \\\"Transfer failed\\\");\\n        uint toMint = _deposit(amount);\\n        _mint(_msgSender(), toMint);\\n        return toMint;\\n    }\\n\\n    /// @dev Burns this token and withdraws primary investment token\\n    function withdraw(uint amount) external returns (uint withdrawn) {\\n        require(amount > 0, \\\"Zero amount\\\");\\n\\n        uint _totalSupply = totalSupply();\\n        _burn(_msgSender(), amount);\\n\\n        uint toWithdraw = _prepareWithdraw(amount, _totalSupply);\\n        require(primary.transfer(_msgSender(), toWithdraw), \\\"Transfer failed\\\");\\n        return toWithdraw;\\n    }\\n\\n    /// @dev Prepares liquidity to be withdrawn. Returns amount of tokens to withdraw\\n    function _prepareWithdraw(uint amount, uint totalSupply) internal virtual returns (uint readyToWithdraw);\\n\\n    function _deposit(uint amount) internal virtual returns (uint toMint);\\n}\\n\",\"keccak256\":\"0x99d1317b8cd38edc53297b2c299211637f532da6c9a5768d65bd6aa6a65fc9c8\",\"license\":\"UNLICENSED\"},\"contracts/v2/TokanDexInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DexInvestment.sol\\\";\\nimport \\\"../interfaces/tokan/TokanPair.sol\\\";\\nimport \\\"../interfaces/tokan/TokanRouter.sol\\\";\\nimport \\\"../interfaces/tokan/TokanGauge.sol\\\";\\n\\ncontract TokanDexInvestment is DexInvestment {\\n    TokanRouter public router;\\n    TokanPair public pair;\\n    TokanGauge public gauge;\\n    bool public stable;\\n    uint private decimalsA;\\n    TokanRouter.Route[] public rewardExchangeRoute;\\n\\n    struct TokanDexInvestmentConfig {\\n        TokanRouter router;\\n        TokanPair pair;\\n        TokanGauge gauge;\\n        uint decimalsA;\\n        bool stable;\\n        TokanRouter.Route[] rewardExchangeRoute;\\n    }\\n\\n    uint constant private UINT_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    function __TokanDexInvestment_init(string memory name_, string memory symbol_, IERC20 _primary, IERC20 _secondary, IERC20 _reward, TokanDexInvestmentConfig memory config) initializer external {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n        __SingleTokenInvestment_init_unchained(_primary);\\n        __DexInvestment_init_unchained(_secondary, _reward);\\n        __TokanDexInvestment_init_unchained(config);\\n        approveAll();\\n    }\\n\\n    function __TokanDexInvestment_init_unchained(TokanDexInvestmentConfig memory config) internal onlyInitializing {\\n        router = config.router;\\n        pair = config.pair;\\n        gauge = config.gauge;\\n        decimalsA = config.decimalsA;\\n        stable = config.stable;\\n        for (uint i = 0; i < config.rewardExchangeRoute.length; i++) {\\n            TokanRouter.Route memory route = config.rewardExchangeRoute[i];\\n            rewardExchangeRoute.push(route);\\n        }\\n    }\\n\\n    function approveAll() public {\\n        primary.approve(address(router), UINT_MAX);\\n        secondary.approve(address(router), UINT_MAX);\\n        pair.approve(address(gauge), UINT_MAX);\\n        pair.approve(address(router), UINT_MAX);\\n        reward.approve(address(router), UINT_MAX);\\n    }\\n\\n    /// @notice Gets reserves for both assets in the pool\\n    function _getReserves() internal override view returns (uint reserveA, uint reserveB) {\\n        (reserveA, reserveB,) = pair.getReserves();\\n    }\\n\\n    /// @notice Gets 10**decimals for primary asset\\n    function _getDecimalsA() internal view override returns (uint) {\\n        return decimalsA;\\n    }\\n\\n    /// @notice Calculates how much secondary tokens will be returned if mainAmount exchanged\\n    function _getSecondaryOut(uint mainAmount) internal view override returns (uint secondaryAmount) {\\n        return pair.getAmountOut(mainAmount, address(primary));\\n    }\\n\\n    /// @notice Calculates how much primary tokens will be returned if secondaryAmount exchanged\\n    function _getPrimaryOut(uint secondaryAmount) internal view override returns (uint primaryAmount) {\\n        return pair.getAmountOut(secondaryAmount, address(secondary));\\n    }\\n\\n    /// @notice Exchanges main and gets secondary token\\n    function _exchangePrimary(uint amount) internal override returns (uint out) {\\n        TokanRouter.Route[] memory route = new TokanRouter.Route[](1);\\n        route[0] = TokanRouter.Route({from: address(primary), to: address(secondary), stable: stable});\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _getSecondaryOut(amount), route, address(this), block.timestamp);\\n        return amounts[1];\\n    }\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeSecondary(uint amount) internal override returns (uint out) {\\n        TokanRouter.Route[] memory route = new TokanRouter.Route[](1);\\n        route[0] = TokanRouter.Route({from: address(secondary), to: address(primary), stable: stable});\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _getPrimaryOut(amount), route, address(this), block.timestamp);\\n        return amounts[1];\\n    }\\n\\n    /// @notice Exchanges secondary token and gets primary token\\n    function _exchangeRewards(uint amount) internal override returns (uint out) {\\n        uint _value = _getRewardValue(amount);\\n        emit TestValue(\\\"reward value\\\", _value);\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, _value, rewardExchangeRoute, address(this), block.timestamp);\\n        return amounts[rewardExchangeRoute.length];\\n    }\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getDexLiquidity() internal view override returns (uint amountA, uint amountB) {\\n        // @dev liquidity - total amount of Pair tokens, deposited in Gauge for this Pool\\n        // @dev potentially some amount can be owned by this contract and not in the gauge, but will always put Pair tokens into the gauge, so should not happen\\n        uint liquidity = gauge.balanceOf(address(this));\\n\\n        // @dev _balance0, _balance1 - how much primary and secondary tokens pair owns (total DEX liquidity)\\n        uint256 _balance0 = primary.balanceOf(address(pair));\\n        uint256 _balance1 = secondary.balanceOf(address(pair));\\n\\n        // @dev _totalSupply - how much of DEX tokens issued\\n        uint256 _totalSupply = pair.totalSupply();\\n        amountA = (liquidity * _balance0) / _totalSupply;\\n        amountB = (liquidity * _balance1) / _totalSupply;\\n    }\\n\\n    /// @notice Returns liquidity currently in the DEX Pool\\n    function _getRewards() internal view override returns (uint amount) {\\n        return gauge.earned(address(this));\\n    }\\n\\n    /// @notice Adds liquidity into DEX pool\\n    function _putIntoDex(uint amountA, uint amountB) internal override returns (uint resultA, uint resultB) {\\n        emit TestValue(\\\"amountA\\\", amountA);\\n        emit TestValue(\\\"amountB\\\", amountB);\\n        bool _stable = stable;\\n        (uint amountAQuote, uint amountBQuote,) = router.quoteAddLiquidity(address(primary), address(secondary), _stable, amountA, amountB);\\n        emit TestValue(\\\"amountAQuote\\\", amountAQuote);\\n        emit TestValue(\\\"amountBQuote\\\", amountBQuote);\\n        (uint addedA, uint addedB, uint liquidity) = router.addLiquidity(address(primary), address(secondary), _stable, amountAQuote, amountBQuote, amountAQuote, amountBQuote, address(this), block.timestamp);\\n        emit TestValue(\\\"addedA\\\", addedA);\\n        emit TestValue(\\\"addedB\\\", addedB);\\n        emit TestValue(\\\"liquidity\\\", liquidity);\\n\\n        resultA = addedA;\\n        resultB = addedB;\\n\\n        gauge.deposit(liquidity);\\n    }\\n\\n    /// @notice Calculates how much primary tokens will be returned if reward exchanged\\n    function _getRewardValue(uint rewardAmount) internal view override returns (uint primaryAmount) {\\n        uint[] memory amounts = router.getAmountsOut(rewardAmount, rewardExchangeRoute);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /// @notice Receives rewards and transfers them to this smart-contract\\n    function _receiveRewards() internal override {\\n        gauge.getReward();\\n    }\\n\\n    /// @notice Removes part of the liquidity from DEX (amount/totalSupply)\\n    function _withdrawFromDex(uint amount, uint totalSupply) internal override returns (uint amountA, uint amountB) {\\n        emit TestValue(\\\"withdraw from dex amount\\\", amount);\\n        emit TestValue(\\\"withdraw from dex total supply\\\", totalSupply);\\n        uint toWithdraw = gauge.balanceOf(address(this)) * amount / totalSupply;\\n        gauge.withdraw(toWithdraw);\\n        (uint quoteA, uint quoteB) = router.quoteRemoveLiquidity(address(primary), address(secondary), stable, toWithdraw);\\n        (uint withdrawnA, uint withdrawnB) = router.removeLiquidity(address(primary), address(secondary), stable, toWithdraw, quoteA, quoteB, address(this), block.timestamp);\\n        amountA = withdrawnA;\\n        amountB = withdrawnB;\\n    }\\n}\\n\",\"keccak256\":\"0x1f74c5a81b72bb12db788383ad597c52f8ad9e7c7642866913b4ab82c344274b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f8480620000216000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80639d3c8cc4116100c3578063b6b55f251161007c578063b6b55f25146103a6578063b7ae7e39146103d6578063c6dbdf61146103f2578063dd62ed3e14610410578063e598bbf614610440578063f887ea40146104725761014d565b80639d3c8cc4146102d0578063a6f19c84146102ee578063a8aa1b311461030c578063a9059cbb1461032a578063af79b2a61461035a578063b4d8b8c81461038a5761014d565b806323b872dd1161011557806323b872dd146101fa5780632e1a7d4d1461022a578063313ce5671461025a578063380d0c081461027857806370a082311461028257806395d89b41146102b25761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a0578063228cb733146101be57806322be3de1146101dc575b600080fd5b61015a610490565b6040516101679190613ecb565b60405180910390f35b61018a60048036038101906101859190613f95565b610531565b6040516101979190613ff0565b60405180910390f35b6101a8610554565b6040516101b5919061401a565b60405180910390f35b6101c661056c565b6040516101d39190614094565b60405180910390f35b6101e4610592565b6040516101f19190613ff0565b60405180910390f35b610214600480360381019061020f91906140af565b6105a5565b6040516102219190613ff0565b60405180910390f35b610244600480360381019061023f9190614102565b6105d4565b604051610251919061401a565b60405180910390f35b610262610731565b60405161026f919061414b565b60405180910390f35b61028061073a565b005b61029c60048036038101906102979190614166565b610ba9565b6040516102a9919061401a565b60405180910390f35b6102ba610c00565b6040516102c79190613ecb565b60405180910390f35b6102d8610ca1565b6040516102e59190614094565b60405180910390f35b6102f6610cc7565b60405161030391906141b4565b60405180910390f35b610314610ced565b60405161032191906141f0565b60405180910390f35b610344600480360381019061033f9190613f95565b610d13565b6040516103519190613ff0565b60405180910390f35b610374600480360381019061036f9190614166565b610d36565b604051610381919061401a565b60405180910390f35b6103a4600480360381019061039f9190614656565b610d7d565b005b6103c060048036038101906103bb9190614102565b610f3e565b6040516103cd919061401a565b60405180910390f35b6103f060048036038101906103eb9190614737565b61108f565b005b6103fa61130e565b6040516104079190614094565b60405180910390f35b61042a60048036038101906104259190614777565b611332565b604051610437919061401a565b60405180910390f35b61045a60048036038101906104559190614102565b6113c7565b604051610469939291906147c6565b60405180910390f35b61047a61144e565b604051610487919061481e565b60405180910390f35b6060600061049c611474565b90508060030180546104ad90614868565b80601f01602080910402602001604051908101604052809291908181526020018280546104d990614868565b80156105265780601f106104fb57610100808354040283529160200191610526565b820191906000526020600020905b81548152906001019060200180831161050957829003601f168201915b505050505091505090565b60008061053c61149c565b90506105498185856114a4565b600191505092915050565b60008061055f611474565b9050806002015491505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560149054906101000a900460ff1681565b6000806105b061149c565b90506105bd8582856114b6565b6105c885858561154a565b60019150509392505050565b6000808211610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f906148e5565b60405180910390fd5b6000610622610554565b905061063561062f61149c565b8461163e565b600061064184836116c0565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61068761149c565b836040518363ffffffff1660e01b81526004016106a5929190614905565b6020604051808303816000875af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190614943565b610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906149bc565b60405180910390fd5b8092505050919050565b60006012905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016107d7929190614905565b6020604051808303816000875af11580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190614943565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108ba929190614905565b6020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190614943565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161099d929190614905565b6020604051808303816000875af11580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190614943565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a80929190614905565b6020604051808303816000875af1158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac39190614943565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610b63929190614905565b6020604051808303816000875af1158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190614943565b50565b600080610bb4611474565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b60606000610c0c611474565b9050806004018054610c1d90614868565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990614868565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b505050505091505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610d1e61149c565b9050610d2b81858561154a565b600191505092915050565b600080610d41610554565b90506000610d4e84610ba9565b90506000610d5a611c27565b9050828282610d699190614a0b565b610d739190614a7c565b9350505050919050565b6000610d87611c6a565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610dd55750825b9050600060018367ffffffffffffffff16148015610e0a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610e18575080155b15610e4f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610e9f5760018560000160086101000a81548160ff0219169083151502179055505b610ea7611c92565b610eb18b8b611c9c565b610eba89611cd9565b610ec48888611d24565b610ecd86611db2565b610ed561073a565b8315610f315760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610f289190614afc565b60405180910390a15b5050505050505050505050565b6000808211610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f79906148e5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610fc661149c565b30856040518463ffffffff1660e01b8152600401610fe693929190614b17565b6020604051808303816000875af1158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190614943565b611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f906149bc565b60405180910390fd5b600061107383611fd3565b905061108661108061149c565b82612178565b80915050919050565b8115611141576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110f29190614b4e565b602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111339190614b7e565b905061113e816121fa565b50505b80801561119d5750600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561125f576111aa6123e9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112079190614b4e565b602060405180830381865afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190614b7e565b90506000811461125d5761125b8161246d565b505b505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112bb9190614b4e565b602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190614b7e565b90506113078161258b565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061133d611474565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b600781815481106113d757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b6114b183838360016125d6565b505050565b60006114c28484611332565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146115445781811015611534578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161152b93929190614bab565b60405180910390fd5b611543848484840360006125d6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115bc5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016115b39190614b4e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162e5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016116259190614b4e565b60405180910390fd5b6116398383836127bc565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116b05760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016116a79190614b4e565b60405180910390fd5b6116bc826000836127bc565b5050565b600080828460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161171e9190614b4e565b602060405180830381865afa15801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190614b7e565b6117699190614a0b565b6117739190614a7c565b905060008385600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117d49190614b4e565b602060405180830381865afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190614b7e565b61181f9190614a0b565b6118299190614a7c565b905060008061183887876129fb565b9150915081846118489190614be2565b94507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2856040516118799190614c62565b60405180910390a161189581846118909190614be2565b6121fa565b856118a09190614be2565b94507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2856040516118d19190614cdc565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c1d577fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119ab9190614b4e565b602060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190614b7e565b6040516119f99190614d56565b60405180910390a1611a096123e9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a669190614b4e565b602060405180830381865afa158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa79190614b7e565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c281604051611ad89190614dd0565b60405180910390a16000878983611aef9190614a0b565b611af99190614a7c565b9050611b048161246d565b87611b0f9190614be2565b96507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c287604051611b409190614e4a565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bc49190614b4e565b602060405180830381865afa158015611be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190614b7e565b604051611c129190614ec4565b60405180910390a150505b5050505092915050565b600080600080611c35612dbd565b925092509250611c4481612f52565b611c4d8361302b565b84611c589190614be2565b611c629190614be2565b935050505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611c9a6130f4565b565b611ca46130f4565b6000611cae611474565b905082816003019081611cc19190615094565b5081816004019081611cd39190615094565b50505050565b611ce16130f4565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d2c6130f4565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b611dba6130f4565b8060000151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060200151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060400151600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606001516006819055508060800151600560146101000a81548160ff02191690831515021790555060005b8160a0015151811015611fcf5760008260a001518281518110611edb57611eda615166565b5b60200260200101519050600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055505050508080600101915050611eb5565b5050565b6000806000611fe18461258b565b915091506000611fef610554565b90506000810361202657612001613134565b670de0b6b3a7640000866120159190614a0b565b61201f9190614a7c565b9350612170565b60008061203161313e565b915091507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c28260405161206491906151e1565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c28160405161209b919061525b565b60405180910390a160006120ad611c27565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516120de91906152d5565b60405180910390a160006120f18661302b565b878a6120fd9190615303565b6121079190614be2565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516121389190615383565b60405180910390a1808261214c9190615303565b612154610554565b8261215f9190614a0b565b6121699190614a7c565b9750505050505b505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121ea5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016121e19190614b4e565b60405180910390fd5b6121f6600083836127bc565b5050565b600080600167ffffffffffffffff81111561221857612217614215565b5b60405190808252806020026020018201604052801561225157816020015b61223e613dec565b8152602001906001900390816122365790505b5090506040518060600160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff1615158152508160008151811061230257612301615166565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d8856123578761302b565b8530426040518663ffffffff1660e01b815260040161237a9594939291906154c0565b6000604051808303816000875af1158015612399573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123c291906155dd565b9050806001815181106123d8576123d7615166565b5b602002602001015192505050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561245357600080fd5b505af1158015612467573d6000803e3d6000fd5b50505050565b60008061247983612f52565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516124aa9190615672565b60405180910390a16000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88584600730426040518663ffffffff1660e01b815260040161251895949392919061581b565b6000604051808303816000875af1158015612537573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061256091906155dd565b9050806007805490508151811061257a57612579615166565b5b602002602001015192505050919050565b600080600083146125c85761259f83613251565b91506125aa826132bd565b90506125c182846125bb9190615303565b826134ac565b50506125d1565b60009150600090505b915091565b60006125e0611474565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036126545760006040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161264b9190614b4e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036126c65760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016126bd9190614b4e565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081156127b5578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516127ac919061401a565b60405180910390a35b5050505050565b60006127c6611474565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361281c57818160020160008282546128109190614be2565b925050819055506128f5565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156128ab578481846040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016128a293929190614bab565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361294057818160020160008282540392505081905550612990565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516129ed919061401a565b60405180910390a350505050565b6000807fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c284604051612a2d91906158c1565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c283604051612a64919061593b565b60405180910390a160008385600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612acb9190614b4e565b602060405180830381865afa158015612ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0c9190614b7e565b612b169190614a0b565b612b209190614a7c565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401612b7d919061401a565b600060405180830381600087803b158015612b9757600080fd5b505af1158015612bab573d6000803e3d6000fd5b50505050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634386e63c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff16876040518563ffffffff1660e01b8152600401612c649493929190615969565b6040805180830381865afa158015612c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca491906159ae565b91509150600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dede6c460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff1689898930426040518963ffffffff1660e01b8152600401612d659897969594939291906159ee565b60408051808303816000875af1158015612d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da791906159ae565b9150915081965080955050505050509250929050565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612e1c9190614b4e565b602060405180830381865afa158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d9190614b7e565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612ebc9190614b4e565b602060405180830381865afa158015612ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efd9190614b7e565b9050600080612f0a6138cd565b91509150600080612f1961313e565b915091508386612f299190614be2565b98508285612f379190614be2565b97508082612f459190614be2565b9650505050505050909192565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639881fcb48460076040518363ffffffff1660e01b8152600401612fb3929190615a6c565b600060405180830381865afa158015612fd0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ff991906155dd565b9050806001825161300a9190615303565b8151811061301b5761301a615166565b5b6020026020010151915050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a83600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016130ac929190615a9c565b602060405180830381865afa1580156130c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ed9190614b7e565b9050919050565b6130fc613bc2565b613132576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600654905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036131a457600091506000905061324d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016131ff9190614b4e565b602060405180830381865afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132409190614b7e565b915061324a613be2565b90505b9091565b60008061325c613134565b9050600061326982613c84565b9050600080613276613d4b565b91509150808484846132889190614a0b565b6132929190614a7c565b61329c9190614be2565b81876132a89190614a0b565b6132b29190614a7c565b945050505050919050565b600080600167ffffffffffffffff8111156132db576132da614215565b5b60405190808252806020026020018201604052801561331457816020015b613301613dec565b8152602001906001900390816132f95790505b509050604051806060016040528060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff161515815250816000815181106133c5576133c4615166565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88561341a87613c84565b8530426040518663ffffffff1660e01b815260040161343d9594939291906154c0565b6000604051808303816000875af115801561345c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061348591906155dd565b90508060018151811061349b5761349a615166565b5b602002602001015192505050919050565b6000807fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2846040516134de9190615b11565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2836040516135159190615b8b565b60405180910390a16000600560149054906101000a900460ff169050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398a0fb3c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868b8b6040518663ffffffff1660e01b81526004016135d9959493929190615bb9565b606060405180830381865afa1580156135f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361a9190615c0c565b50915091507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c28260405161364e9190615cab565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516136859190615d25565b60405180910390a16000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a47ddc360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168989898b8b30426040518a63ffffffff1660e01b815260040161373f99989796959493929190615d53565b6060604051808303816000875af115801561375e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137829190615c0c565b9250925092507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2836040516137b79190615e2c565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2826040516137ee9190615ea6565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516138259190615f20565b60405180910390a1829750819650600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b815260040161388e919061401a565b600060405180830381600087803b1580156138a857600080fd5b505af11580156138bc573d6000803e3d6000fd5b505050505050505050509250929050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161392d9190614b4e565b602060405180830381865afa15801561394a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396e9190614b7e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016139ee9190614b4e565b602060405180830381865afa158015613a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2f9190614b7e565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401613ab09190614b4e565b602060405180830381865afa158015613acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af19190614b7e565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b869190614b7e565b9050808385613b959190614a0b565b613b9f9190614a7c565b9550808285613bae9190614a0b565b613bb89190614a7c565b9450505050509091565b6000613bcc611c6a565b60000160089054906101000a900460ff16905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b8152600401613c3e9190614b4e565b602060405180830381865afa158015613c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7f9190614b7e565b905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401613d03929190615a9c565b602060405180830381865afa158015613d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d449190614b7e565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddf9190615c0c565b5080925081935050509091565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015613e75578082015181840152602081019050613e5a565b60008484015250505050565b6000601f19601f8301169050919050565b6000613e9d82613e3b565b613ea78185613e46565b9350613eb7818560208601613e57565b613ec081613e81565b840191505092915050565b60006020820190508181036000830152613ee58184613e92565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f2c82613f01565b9050919050565b613f3c81613f21565b8114613f4757600080fd5b50565b600081359050613f5981613f33565b92915050565b6000819050919050565b613f7281613f5f565b8114613f7d57600080fd5b50565b600081359050613f8f81613f69565b92915050565b60008060408385031215613fac57613fab613ef7565b5b6000613fba85828601613f4a565b9250506020613fcb85828601613f80565b9150509250929050565b60008115159050919050565b613fea81613fd5565b82525050565b60006020820190506140056000830184613fe1565b92915050565b61401481613f5f565b82525050565b600060208201905061402f600083018461400b565b92915050565b6000819050919050565b600061405a61405561405084613f01565b614035565b613f01565b9050919050565b600061406c8261403f565b9050919050565b600061407e82614061565b9050919050565b61408e81614073565b82525050565b60006020820190506140a96000830184614085565b92915050565b6000806000606084860312156140c8576140c7613ef7565b5b60006140d686828701613f4a565b93505060206140e786828701613f4a565b92505060406140f886828701613f80565b9150509250925092565b60006020828403121561411857614117613ef7565b5b600061412684828501613f80565b91505092915050565b600060ff82169050919050565b6141458161412f565b82525050565b6000602082019050614160600083018461413c565b92915050565b60006020828403121561417c5761417b613ef7565b5b600061418a84828501613f4a565b91505092915050565b600061419e82614061565b9050919050565b6141ae81614193565b82525050565b60006020820190506141c960008301846141a5565b92915050565b60006141da82614061565b9050919050565b6141ea816141cf565b82525050565b600060208201905061420560008301846141e1565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61424d82613e81565b810181811067ffffffffffffffff8211171561426c5761426b614215565b5b80604052505050565b600061427f613eed565b905061428b8282614244565b919050565b600067ffffffffffffffff8211156142ab576142aa614215565b5b6142b482613e81565b9050602081019050919050565b82818337600083830152505050565b60006142e36142de84614290565b614275565b9050828152602081018484840111156142ff576142fe614210565b5b61430a8482856142c1565b509392505050565b600082601f8301126143275761432661420b565b5b81356143378482602086016142d0565b91505092915050565b600061434b82613f21565b9050919050565b61435b81614340565b811461436657600080fd5b50565b60008135905061437881614352565b92915050565b600080fd5b600080fd5b600061439382613f21565b9050919050565b6143a381614388565b81146143ae57600080fd5b50565b6000813590506143c08161439a565b92915050565b60006143d182613f21565b9050919050565b6143e1816143c6565b81146143ec57600080fd5b50565b6000813590506143fe816143d8565b92915050565b600061440f82613f21565b9050919050565b61441f81614404565b811461442a57600080fd5b50565b60008135905061443c81614416565b92915050565b61444b81613fd5565b811461445657600080fd5b50565b60008135905061446881614442565b92915050565b600067ffffffffffffffff82111561448957614488614215565b5b602082029050602081019050919050565b600080fd5b6000606082840312156144b5576144b461437e565b5b6144bf6060614275565b905060006144cf84828501613f4a565b60008301525060206144e384828501613f4a565b60208301525060406144f784828501614459565b60408301525092915050565b60006145166145118461446e565b614275565b905080838252602082019050606084028301858111156145395761453861449a565b5b835b81811015614562578061454e888261449f565b84526020840193505060608101905061453b565b5050509392505050565b600082601f8301126145815761458061420b565b5b8135614591848260208601614503565b91505092915050565b600060c082840312156145b0576145af61437e565b5b6145ba60c0614275565b905060006145ca848285016143b1565b60008301525060206145de848285016143ef565b60208301525060406145f28482850161442d565b604083015250606061460684828501613f80565b606083015250608061461a84828501614459565b60808301525060a082013567ffffffffffffffff81111561463e5761463d614383565b5b61464a8482850161456c565b60a08301525092915050565b60008060008060008060c0878903121561467357614672613ef7565b5b600087013567ffffffffffffffff81111561469157614690613efc565b5b61469d89828a01614312565b965050602087013567ffffffffffffffff8111156146be576146bd613efc565b5b6146ca89828a01614312565b95505060406146db89828a01614369565b94505060606146ec89828a01614369565b93505060806146fd89828a01614369565b92505060a087013567ffffffffffffffff81111561471e5761471d613efc565b5b61472a89828a0161459a565b9150509295509295509295565b6000806040838503121561474e5761474d613ef7565b5b600061475c85828601614459565b925050602061476d85828601614459565b9150509250929050565b6000806040838503121561478e5761478d613ef7565b5b600061479c85828601613f4a565b92505060206147ad85828601613f4a565b9150509250929050565b6147c081613f21565b82525050565b60006060820190506147db60008301866147b7565b6147e860208301856147b7565b6147f56040830184613fe1565b949350505050565b600061480882614061565b9050919050565b614818816147fd565b82525050565b6000602082019050614833600083018461480f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061488057607f821691505b60208210810361489357614892614839565b5b50919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b60006148cf600b83613e46565b91506148da82614899565b602082019050919050565b600060208201905081810360008301526148fe816148c2565b9050919050565b600060408201905061491a60008301856147b7565b614927602083018461400b565b9392505050565b60008151905061493d81614442565b92915050565b60006020828403121561495957614958613ef7565b5b60006149678482850161492e565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006149a6600f83613e46565b91506149b182614970565b602082019050919050565b600060208201905081810360008301526149d581614999565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a1682613f5f565b9150614a2183613f5f565b9250828202614a2f81613f5f565b91508282048414831517614a4657614a456149dc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614a8782613f5f565b9150614a9283613f5f565b925082614aa257614aa1614a4d565b5b828204905092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000614ae6614ae1614adc84614aad565b614035565b614ab7565b9050919050565b614af681614acb565b82525050565b6000602082019050614b116000830184614aed565b92915050565b6000606082019050614b2c60008301866147b7565b614b3960208301856147b7565b614b46604083018461400b565b949350505050565b6000602082019050614b6360008301846147b7565b92915050565b600081519050614b7881613f69565b92915050565b600060208284031215614b9457614b93613ef7565b5b6000614ba284828501614b69565b91505092915050565b6000606082019050614bc060008301866147b7565b614bcd602083018561400b565b614bda604083018461400b565b949350505050565b6000614bed82613f5f565b9150614bf883613f5f565b9250828201905080821115614c1057614c0f6149dc565b5b92915050565b7f726561647920746f207769746864726177207072696d61727900000000000000600082015250565b6000614c4c601983613e46565b9150614c5782614c16565b602082019050919050565b60006040820190508181036000830152614c7b81614c3f565b9050614c8a602083018461400b565b92915050565b7f726561647920746f207769746864726177202b7365636f6e6461727900000000600082015250565b6000614cc6601c83613e46565b9150614cd182614c90565b602082019050919050565b60006040820190508181036000830152614cf581614cb9565b9050614d04602083018461400b565b92915050565b7f746f74616c2072657761726473206265666f7265000000000000000000000000600082015250565b6000614d40601483613e46565b9150614d4b82614d0a565b602082019050919050565b60006040820190508181036000830152614d6f81614d33565b9050614d7e602083018461400b565b92915050565b7f746f74616c207265776172647300000000000000000000000000000000000000600082015250565b6000614dba600d83613e46565b9150614dc582614d84565b602082019050919050565b60006040820190508181036000830152614de981614dad565b9050614df8602083018461400b565b92915050565b7f726561647920746f207769746864726177202b72657761726473000000000000600082015250565b6000614e34601a83613e46565b9150614e3f82614dfe565b602082019050919050565b60006040820190508181036000830152614e6381614e27565b9050614e72602083018461400b565b92915050565b7f746f74616c207265776172647320616674657200000000000000000000000000600082015250565b6000614eae601383613e46565b9150614eb982614e78565b602082019050919050565b60006040820190508181036000830152614edd81614ea1565b9050614eec602083018461400b565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614f547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614f17565b614f5e8683614f17565b95508019841693508086168417925050509392505050565b6000614f91614f8c614f8784613f5f565b614035565b613f5f565b9050919050565b6000819050919050565b614fab83614f76565b614fbf614fb782614f98565b848454614f24565b825550505050565b600090565b614fd4614fc7565b614fdf818484614fa2565b505050565b5b8181101561500357614ff8600082614fcc565b600181019050614fe5565b5050565b601f8211156150485761501981614ef2565b61502284614f07565b81016020851015615031578190505b61504561503d85614f07565b830182614fe4565b50505b505050565b600082821c905092915050565b600061506b6000198460080261504d565b1980831691505092915050565b6000615084838361505a565b9150826002028217905092915050565b61509d82613e3b565b67ffffffffffffffff8111156150b6576150b5614215565b5b6150c08254614868565b6150cb828285615007565b600060209050601f8311600181146150fe57600084156150ec578287015190505b6150f68582615078565b86555061515e565b601f19841661510c86614ef2565b60005b828110156151345784890151825560018201915060208501945060208101905061510f565b86831015615151578489015161514d601f89168261505a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6f776e6564526577617264730000000000000000000000000000000000000000600082015250565b60006151cb600c83613e46565b91506151d682615195565b602082019050919050565b600060408201905081810360008301526151fa816151be565b9050615209602083018461400b565b92915050565b7f756e636c61696d65645265776172647300000000000000000000000000000000600082015250565b6000615245601083613e46565b91506152508261520f565b602082019050919050565b6000604082019050818103600083015261527481615238565b9050615283602083018461400b565b92915050565b7f746f74616c000000000000000000000000000000000000000000000000000000600082015250565b60006152bf600583613e46565b91506152ca82615289565b602082019050919050565b600060408201905081810360008301526152ee816152b2565b90506152fd602083018461400b565b92915050565b600061530e82613f5f565b915061531983613f5f565b9250828203905081811115615331576153306149dc565b5b92915050565b7f6465706f73697465640000000000000000000000000000000000000000000000600082015250565b600061536d600983613e46565b915061537882615337565b602082019050919050565b6000604082019050818103600083015261539c81615360565b90506153ab602083018461400b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6153e681613f21565b82525050565b6153f581613fd5565b82525050565b60608201600082015161541160008501826153dd565b50602082015161542460208501826153dd565b50604082015161543760408501826153ec565b50505050565b600061544983836153fb565b60608301905092915050565b6000602082019050919050565b600061546d826153b1565b61547781856153bc565b9350615482836153cd565b8060005b838110156154b357815161549a888261543d565b97506154a583615455565b925050600181019050615486565b5085935050505092915050565b600060a0820190506154d5600083018861400b565b6154e2602083018761400b565b81810360408301526154f48186615462565b905061550360608301856147b7565b615510608083018461400b565b9695505050505050565b600067ffffffffffffffff82111561553557615534614215565b5b602082029050602081019050919050565b60006155596155548461551a565b614275565b9050808382526020820190506020840283018581111561557c5761557b61449a565b5b835b818110156155a557806155918882614b69565b84526020840193505060208101905061557e565b5050509392505050565b600082601f8301126155c4576155c361420b565b5b81516155d4848260208601615546565b91505092915050565b6000602082840312156155f3576155f2613ef7565b5b600082015167ffffffffffffffff81111561561157615610613efc565b5b61561d848285016155af565b91505092915050565b7f7265776172642076616c75650000000000000000000000000000000000000000600082015250565b600061565c600c83613e46565b915061566782615626565b602082019050919050565b6000604082019050818103600083015261568b8161564f565b905061569a602083018461400b565b92915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006157006156fb836156c0565b6156cd565b9050919050565b60008160a01c9050919050565b600060ff82169050919050565b600061573461572f83615707565b615714565b9050919050565b606082016000808301549050615750816156ed565b61575d60008601826153dd565b506001830154905061576e816156ed565b61577b60208601826153dd565b5061578581615721565b61579260408601826153ec565b5050505050565b60006157a5838361573b565b60608301905092915050565b6000600282019050919050565b60006157c9826156a0565b6157d381856153bc565b93506157de836156ab565b8060005b8381101561580e57816157f58882615799565b9750615800836157b1565b9250506001810190506157e2565b5085935050505092915050565b600060a082019050615830600083018861400b565b61583d602083018761400b565b818103604083015261584f81866157be565b905061585e60608301856147b7565b61586b608083018461400b565b9695505050505050565b7f77697468647261772066726f6d2064657820616d6f756e740000000000000000600082015250565b60006158ab601883613e46565b91506158b682615875565b602082019050919050565b600060408201905081810360008301526158da8161589e565b90506158e9602083018461400b565b92915050565b7f77697468647261772066726f6d2064657820746f74616c20737570706c790000600082015250565b6000615925601e83613e46565b9150615930826158ef565b602082019050919050565b6000604082019050818103600083015261595481615918565b9050615963602083018461400b565b92915050565b600060808201905061597e60008301876147b7565b61598b60208301866147b7565b6159986040830185613fe1565b6159a5606083018461400b565b95945050505050565b600080604083850312156159c5576159c4613ef7565b5b60006159d385828601614b69565b92505060206159e485828601614b69565b9150509250929050565b600061010082019050615a04600083018b6147b7565b615a11602083018a6147b7565b615a1e6040830189613fe1565b615a2b606083018861400b565b615a38608083018761400b565b615a4560a083018661400b565b615a5260c08301856147b7565b615a5f60e083018461400b565b9998505050505050505050565b6000604082019050615a81600083018561400b565b8181036020830152615a9381846157be565b90509392505050565b6000604082019050615ab1600083018561400b565b615abe60208301846147b7565b9392505050565b7f616d6f756e744100000000000000000000000000000000000000000000000000600082015250565b6000615afb600783613e46565b9150615b0682615ac5565b602082019050919050565b60006040820190508181036000830152615b2a81615aee565b9050615b39602083018461400b565b92915050565b7f616d6f756e744200000000000000000000000000000000000000000000000000600082015250565b6000615b75600783613e46565b9150615b8082615b3f565b602082019050919050565b60006040820190508181036000830152615ba481615b68565b9050615bb3602083018461400b565b92915050565b600060a082019050615bce60008301886147b7565b615bdb60208301876147b7565b615be86040830186613fe1565b615bf5606083018561400b565b615c02608083018461400b565b9695505050505050565b600080600060608486031215615c2557615c24613ef7565b5b6000615c3386828701614b69565b9350506020615c4486828701614b69565b9250506040615c5586828701614b69565b9150509250925092565b7f616d6f756e744151756f74650000000000000000000000000000000000000000600082015250565b6000615c95600c83613e46565b9150615ca082615c5f565b602082019050919050565b60006040820190508181036000830152615cc481615c88565b9050615cd3602083018461400b565b92915050565b7f616d6f756e744251756f74650000000000000000000000000000000000000000600082015250565b6000615d0f600c83613e46565b9150615d1a82615cd9565b602082019050919050565b60006040820190508181036000830152615d3e81615d02565b9050615d4d602083018461400b565b92915050565b600061012082019050615d69600083018c6147b7565b615d76602083018b6147b7565b615d83604083018a613fe1565b615d90606083018961400b565b615d9d608083018861400b565b615daa60a083018761400b565b615db760c083018661400b565b615dc460e08301856147b7565b615dd261010083018461400b565b9a9950505050505050505050565b7f6164646564410000000000000000000000000000000000000000000000000000600082015250565b6000615e16600683613e46565b9150615e2182615de0565b602082019050919050565b60006040820190508181036000830152615e4581615e09565b9050615e54602083018461400b565b92915050565b7f6164646564420000000000000000000000000000000000000000000000000000600082015250565b6000615e90600683613e46565b9150615e9b82615e5a565b602082019050919050565b60006040820190508181036000830152615ebf81615e83565b9050615ece602083018461400b565b92915050565b7f6c69717569646974790000000000000000000000000000000000000000000000600082015250565b6000615f0a600983613e46565b9150615f1582615ed4565b602082019050919050565b60006040820190508181036000830152615f3981615efd565b9050615f48602083018461400b565b9291505056fea264697066735822122055427c84db0a2782c96d184a3349a842ec7b541e46787decd30b27c67368736c64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80639d3c8cc4116100c3578063b6b55f251161007c578063b6b55f25146103a6578063b7ae7e39146103d6578063c6dbdf61146103f2578063dd62ed3e14610410578063e598bbf614610440578063f887ea40146104725761014d565b80639d3c8cc4146102d0578063a6f19c84146102ee578063a8aa1b311461030c578063a9059cbb1461032a578063af79b2a61461035a578063b4d8b8c81461038a5761014d565b806323b872dd1161011557806323b872dd146101fa5780632e1a7d4d1461022a578063313ce5671461025a578063380d0c081461027857806370a082311461028257806395d89b41146102b25761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a0578063228cb733146101be57806322be3de1146101dc575b600080fd5b61015a610490565b6040516101679190613ecb565b60405180910390f35b61018a60048036038101906101859190613f95565b610531565b6040516101979190613ff0565b60405180910390f35b6101a8610554565b6040516101b5919061401a565b60405180910390f35b6101c661056c565b6040516101d39190614094565b60405180910390f35b6101e4610592565b6040516101f19190613ff0565b60405180910390f35b610214600480360381019061020f91906140af565b6105a5565b6040516102219190613ff0565b60405180910390f35b610244600480360381019061023f9190614102565b6105d4565b604051610251919061401a565b60405180910390f35b610262610731565b60405161026f919061414b565b60405180910390f35b61028061073a565b005b61029c60048036038101906102979190614166565b610ba9565b6040516102a9919061401a565b60405180910390f35b6102ba610c00565b6040516102c79190613ecb565b60405180910390f35b6102d8610ca1565b6040516102e59190614094565b60405180910390f35b6102f6610cc7565b60405161030391906141b4565b60405180910390f35b610314610ced565b60405161032191906141f0565b60405180910390f35b610344600480360381019061033f9190613f95565b610d13565b6040516103519190613ff0565b60405180910390f35b610374600480360381019061036f9190614166565b610d36565b604051610381919061401a565b60405180910390f35b6103a4600480360381019061039f9190614656565b610d7d565b005b6103c060048036038101906103bb9190614102565b610f3e565b6040516103cd919061401a565b60405180910390f35b6103f060048036038101906103eb9190614737565b61108f565b005b6103fa61130e565b6040516104079190614094565b60405180910390f35b61042a60048036038101906104259190614777565b611332565b604051610437919061401a565b60405180910390f35b61045a60048036038101906104559190614102565b6113c7565b604051610469939291906147c6565b60405180910390f35b61047a61144e565b604051610487919061481e565b60405180910390f35b6060600061049c611474565b90508060030180546104ad90614868565b80601f01602080910402602001604051908101604052809291908181526020018280546104d990614868565b80156105265780601f106104fb57610100808354040283529160200191610526565b820191906000526020600020905b81548152906001019060200180831161050957829003601f168201915b505050505091505090565b60008061053c61149c565b90506105498185856114a4565b600191505092915050565b60008061055f611474565b9050806002015491505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560149054906101000a900460ff1681565b6000806105b061149c565b90506105bd8582856114b6565b6105c885858561154a565b60019150509392505050565b6000808211610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f906148e5565b60405180910390fd5b6000610622610554565b905061063561062f61149c565b8461163e565b600061064184836116c0565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61068761149c565b836040518363ffffffff1660e01b81526004016106a5929190614905565b6020604051808303816000875af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190614943565b610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906149bc565b60405180910390fd5b8092505050919050565b60006012905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016107d7929190614905565b6020604051808303816000875af11580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190614943565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108ba929190614905565b6020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190614943565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161099d929190614905565b6020604051808303816000875af11580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190614943565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a80929190614905565b6020604051808303816000875af1158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac39190614943565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610b63929190614905565b6020604051808303816000875af1158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190614943565b50565b600080610bb4611474565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b60606000610c0c611474565b9050806004018054610c1d90614868565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990614868565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b505050505091505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610d1e61149c565b9050610d2b81858561154a565b600191505092915050565b600080610d41610554565b90506000610d4e84610ba9565b90506000610d5a611c27565b9050828282610d699190614a0b565b610d739190614a7c565b9350505050919050565b6000610d87611c6a565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610dd55750825b9050600060018367ffffffffffffffff16148015610e0a575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610e18575080155b15610e4f576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610e9f5760018560000160086101000a81548160ff0219169083151502179055505b610ea7611c92565b610eb18b8b611c9c565b610eba89611cd9565b610ec48888611d24565b610ecd86611db2565b610ed561073a565b8315610f315760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610f289190614afc565b60405180910390a15b5050505050505050505050565b6000808211610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f79906148e5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610fc661149c565b30856040518463ffffffff1660e01b8152600401610fe693929190614b17565b6020604051808303816000875af1158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190614943565b611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f906149bc565b60405180910390fd5b600061107383611fd3565b905061108661108061149c565b82612178565b80915050919050565b8115611141576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110f29190614b4e565b602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111339190614b7e565b905061113e816121fa565b50505b80801561119d5750600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561125f576111aa6123e9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112079190614b4e565b602060405180830381865afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190614b7e565b90506000811461125d5761125b8161246d565b505b505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112bb9190614b4e565b602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190614b7e565b90506113078161258b565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061133d611474565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b600781815481106113d757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b6114b183838360016125d6565b505050565b60006114c28484611332565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146115445781811015611534578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161152b93929190614bab565b60405180910390fd5b611543848484840360006125d6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115bc5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016115b39190614b4e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162e5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016116259190614b4e565b60405180910390fd5b6116398383836127bc565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116b05760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016116a79190614b4e565b60405180910390fd5b6116bc826000836127bc565b5050565b600080828460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161171e9190614b4e565b602060405180830381865afa15801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190614b7e565b6117699190614a0b565b6117739190614a7c565b905060008385600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117d49190614b4e565b602060405180830381865afa1580156117f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118159190614b7e565b61181f9190614a0b565b6118299190614a7c565b905060008061183887876129fb565b9150915081846118489190614be2565b94507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2856040516118799190614c62565b60405180910390a161189581846118909190614be2565b6121fa565b856118a09190614be2565b94507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2856040516118d19190614cdc565b60405180910390a1600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c1d577fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119ab9190614b4e565b602060405180830381865afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190614b7e565b6040516119f99190614d56565b60405180910390a1611a096123e9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a669190614b4e565b602060405180830381865afa158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa79190614b7e565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c281604051611ad89190614dd0565b60405180910390a16000878983611aef9190614a0b565b611af99190614a7c565b9050611b048161246d565b87611b0f9190614be2565b96507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c287604051611b409190614e4a565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bc49190614b4e565b602060405180830381865afa158015611be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c059190614b7e565b604051611c129190614ec4565b60405180910390a150505b5050505092915050565b600080600080611c35612dbd565b925092509250611c4481612f52565b611c4d8361302b565b84611c589190614be2565b611c629190614be2565b935050505090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611c9a6130f4565b565b611ca46130f4565b6000611cae611474565b905082816003019081611cc19190615094565b5081816004019081611cd39190615094565b50505050565b611ce16130f4565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d2c6130f4565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b611dba6130f4565b8060000151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060200151600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060400151600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606001516006819055508060800151600560146101000a81548160ff02191690831515021790555060005b8160a0015151811015611fcf5760008260a001518281518110611edb57611eda615166565b5b60200260200101519050600781908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055505050508080600101915050611eb5565b5050565b6000806000611fe18461258b565b915091506000611fef610554565b90506000810361202657612001613134565b670de0b6b3a7640000866120159190614a0b565b61201f9190614a7c565b9350612170565b60008061203161313e565b915091507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c28260405161206491906151e1565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c28160405161209b919061525b565b60405180910390a160006120ad611c27565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516120de91906152d5565b60405180910390a160006120f18661302b565b878a6120fd9190615303565b6121079190614be2565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516121389190615383565b60405180910390a1808261214c9190615303565b612154610554565b8261215f9190614a0b565b6121699190614a7c565b9750505050505b505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121ea5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016121e19190614b4e565b60405180910390fd5b6121f6600083836127bc565b5050565b600080600167ffffffffffffffff81111561221857612217614215565b5b60405190808252806020026020018201604052801561225157816020015b61223e613dec565b8152602001906001900390816122365790505b5090506040518060600160405280600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff1615158152508160008151811061230257612301615166565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d8856123578761302b565b8530426040518663ffffffff1660e01b815260040161237a9594939291906154c0565b6000604051808303816000875af1158015612399573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123c291906155dd565b9050806001815181106123d8576123d7615166565b5b602002602001015192505050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561245357600080fd5b505af1158015612467573d6000803e3d6000fd5b50505050565b60008061247983612f52565b90507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516124aa9190615672565b60405180910390a16000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88584600730426040518663ffffffff1660e01b815260040161251895949392919061581b565b6000604051808303816000875af1158015612537573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061256091906155dd565b9050806007805490508151811061257a57612579615166565b5b602002602001015192505050919050565b600080600083146125c85761259f83613251565b91506125aa826132bd565b90506125c182846125bb9190615303565b826134ac565b50506125d1565b60009150600090505b915091565b60006125e0611474565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036126545760006040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161264b9190614b4e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036126c65760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016126bd9190614b4e565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081156127b5578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516127ac919061401a565b60405180910390a35b5050505050565b60006127c6611474565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361281c57818160020160008282546128109190614be2565b925050819055506128f5565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156128ab578481846040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016128a293929190614bab565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361294057818160020160008282540392505081905550612990565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516129ed919061401a565b60405180910390a350505050565b6000807fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c284604051612a2d91906158c1565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c283604051612a64919061593b565b60405180910390a160008385600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612acb9190614b4e565b602060405180830381865afa158015612ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0c9190614b7e565b612b169190614a0b565b612b209190614a7c565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401612b7d919061401a565b600060405180830381600087803b158015612b9757600080fd5b505af1158015612bab573d6000803e3d6000fd5b50505050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634386e63c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff16876040518563ffffffff1660e01b8152600401612c649493929190615969565b6040805180830381865afa158015612c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca491906159ae565b91509150600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dede6c460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560149054906101000a900460ff1689898930426040518963ffffffff1660e01b8152600401612d659897969594939291906159ee565b60408051808303816000875af1158015612d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da791906159ae565b9150915081965080955050505050509250929050565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612e1c9190614b4e565b602060405180830381865afa158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d9190614b7e565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612ebc9190614b4e565b602060405180830381865afa158015612ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efd9190614b7e565b9050600080612f0a6138cd565b91509150600080612f1961313e565b915091508386612f299190614be2565b98508285612f379190614be2565b97508082612f459190614be2565b9650505050505050909192565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639881fcb48460076040518363ffffffff1660e01b8152600401612fb3929190615a6c565b600060405180830381865afa158015612fd0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ff991906155dd565b9050806001825161300a9190615303565b8151811061301b5761301a615166565b5b6020026020010151915050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a83600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016130ac929190615a9c565b602060405180830381865afa1580156130c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ed9190614b7e565b9050919050565b6130fc613bc2565b613132576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600654905090565b600080600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036131a457600091506000905061324d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016131ff9190614b4e565b602060405180830381865afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132409190614b7e565b915061324a613be2565b90505b9091565b60008061325c613134565b9050600061326982613c84565b9050600080613276613d4b565b91509150808484846132889190614a0b565b6132929190614a7c565b61329c9190614be2565b81876132a89190614a0b565b6132b29190614a7c565b945050505050919050565b600080600167ffffffffffffffff8111156132db576132da614215565b5b60405190808252806020026020018201604052801561331457816020015b613301613dec565b8152602001906001900390816132f95790505b509050604051806060016040528060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600560149054906101000a900460ff161515815250816000815181106133c5576133c4615166565b5b60200260200101819052506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f41766d88561341a87613c84565b8530426040518663ffffffff1660e01b815260040161343d9594939291906154c0565b6000604051808303816000875af115801561345c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061348591906155dd565b90508060018151811061349b5761349a615166565b5b602002602001015192505050919050565b6000807fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2846040516134de9190615b11565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2836040516135159190615b8b565b60405180910390a16000600560149054906101000a900460ff169050600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398a0fb3c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868b8b6040518663ffffffff1660e01b81526004016135d9959493929190615bb9565b606060405180830381865afa1580156135f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361a9190615c0c565b50915091507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c28260405161364e9190615cab565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516136859190615d25565b60405180910390a16000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a47ddc360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168989898b8b30426040518a63ffffffff1660e01b815260040161373f99989796959493929190615d53565b6060604051808303816000875af115801561375e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137829190615c0c565b9250925092507fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2836040516137b79190615e2c565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2826040516137ee9190615ea6565b60405180910390a17fe149f705a324b8868afb0e51c73eccbf05bc70f9420e37fdd0b8042d703755c2816040516138259190615f20565b60405180910390a1829750819650600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b815260040161388e919061401a565b600060405180830381600087803b1580156138a857600080fd5b505af11580156138bc573d6000803e3d6000fd5b505050505050505050509250929050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161392d9190614b4e565b602060405180830381865afa15801561394a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396e9190614b7e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016139ee9190614b4e565b602060405180830381865afa158015613a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2f9190614b7e565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401613ab09190614b4e565b602060405180830381865afa158015613acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af19190614b7e565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b869190614b7e565b9050808385613b959190614a0b565b613b9f9190614a7c565b9550808285613bae9190614a0b565b613bb89190614a7c565b9450505050509091565b6000613bcc611c6a565b60000160089054906101000a900460ff16905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262306040518263ffffffff1660e01b8152600401613c3e9190614b4e565b602060405180830381865afa158015613c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7f9190614b7e565b905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f140a35a8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401613d03929190615a9c565b602060405180830381865afa158015613d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d449190614b7e565b9050919050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddf9190615c0c565b5080925081935050509091565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015613e75578082015181840152602081019050613e5a565b60008484015250505050565b6000601f19601f8301169050919050565b6000613e9d82613e3b565b613ea78185613e46565b9350613eb7818560208601613e57565b613ec081613e81565b840191505092915050565b60006020820190508181036000830152613ee58184613e92565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f2c82613f01565b9050919050565b613f3c81613f21565b8114613f4757600080fd5b50565b600081359050613f5981613f33565b92915050565b6000819050919050565b613f7281613f5f565b8114613f7d57600080fd5b50565b600081359050613f8f81613f69565b92915050565b60008060408385031215613fac57613fab613ef7565b5b6000613fba85828601613f4a565b9250506020613fcb85828601613f80565b9150509250929050565b60008115159050919050565b613fea81613fd5565b82525050565b60006020820190506140056000830184613fe1565b92915050565b61401481613f5f565b82525050565b600060208201905061402f600083018461400b565b92915050565b6000819050919050565b600061405a61405561405084613f01565b614035565b613f01565b9050919050565b600061406c8261403f565b9050919050565b600061407e82614061565b9050919050565b61408e81614073565b82525050565b60006020820190506140a96000830184614085565b92915050565b6000806000606084860312156140c8576140c7613ef7565b5b60006140d686828701613f4a565b93505060206140e786828701613f4a565b92505060406140f886828701613f80565b9150509250925092565b60006020828403121561411857614117613ef7565b5b600061412684828501613f80565b91505092915050565b600060ff82169050919050565b6141458161412f565b82525050565b6000602082019050614160600083018461413c565b92915050565b60006020828403121561417c5761417b613ef7565b5b600061418a84828501613f4a565b91505092915050565b600061419e82614061565b9050919050565b6141ae81614193565b82525050565b60006020820190506141c960008301846141a5565b92915050565b60006141da82614061565b9050919050565b6141ea816141cf565b82525050565b600060208201905061420560008301846141e1565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61424d82613e81565b810181811067ffffffffffffffff8211171561426c5761426b614215565b5b80604052505050565b600061427f613eed565b905061428b8282614244565b919050565b600067ffffffffffffffff8211156142ab576142aa614215565b5b6142b482613e81565b9050602081019050919050565b82818337600083830152505050565b60006142e36142de84614290565b614275565b9050828152602081018484840111156142ff576142fe614210565b5b61430a8482856142c1565b509392505050565b600082601f8301126143275761432661420b565b5b81356143378482602086016142d0565b91505092915050565b600061434b82613f21565b9050919050565b61435b81614340565b811461436657600080fd5b50565b60008135905061437881614352565b92915050565b600080fd5b600080fd5b600061439382613f21565b9050919050565b6143a381614388565b81146143ae57600080fd5b50565b6000813590506143c08161439a565b92915050565b60006143d182613f21565b9050919050565b6143e1816143c6565b81146143ec57600080fd5b50565b6000813590506143fe816143d8565b92915050565b600061440f82613f21565b9050919050565b61441f81614404565b811461442a57600080fd5b50565b60008135905061443c81614416565b92915050565b61444b81613fd5565b811461445657600080fd5b50565b60008135905061446881614442565b92915050565b600067ffffffffffffffff82111561448957614488614215565b5b602082029050602081019050919050565b600080fd5b6000606082840312156144b5576144b461437e565b5b6144bf6060614275565b905060006144cf84828501613f4a565b60008301525060206144e384828501613f4a565b60208301525060406144f784828501614459565b60408301525092915050565b60006145166145118461446e565b614275565b905080838252602082019050606084028301858111156145395761453861449a565b5b835b81811015614562578061454e888261449f565b84526020840193505060608101905061453b565b5050509392505050565b600082601f8301126145815761458061420b565b5b8135614591848260208601614503565b91505092915050565b600060c082840312156145b0576145af61437e565b5b6145ba60c0614275565b905060006145ca848285016143b1565b60008301525060206145de848285016143ef565b60208301525060406145f28482850161442d565b604083015250606061460684828501613f80565b606083015250608061461a84828501614459565b60808301525060a082013567ffffffffffffffff81111561463e5761463d614383565b5b61464a8482850161456c565b60a08301525092915050565b60008060008060008060c0878903121561467357614672613ef7565b5b600087013567ffffffffffffffff81111561469157614690613efc565b5b61469d89828a01614312565b965050602087013567ffffffffffffffff8111156146be576146bd613efc565b5b6146ca89828a01614312565b95505060406146db89828a01614369565b94505060606146ec89828a01614369565b93505060806146fd89828a01614369565b92505060a087013567ffffffffffffffff81111561471e5761471d613efc565b5b61472a89828a0161459a565b9150509295509295509295565b6000806040838503121561474e5761474d613ef7565b5b600061475c85828601614459565b925050602061476d85828601614459565b9150509250929050565b6000806040838503121561478e5761478d613ef7565b5b600061479c85828601613f4a565b92505060206147ad85828601613f4a565b9150509250929050565b6147c081613f21565b82525050565b60006060820190506147db60008301866147b7565b6147e860208301856147b7565b6147f56040830184613fe1565b949350505050565b600061480882614061565b9050919050565b614818816147fd565b82525050565b6000602082019050614833600083018461480f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061488057607f821691505b60208210810361489357614892614839565b5b50919050565b7f5a65726f20616d6f756e74000000000000000000000000000000000000000000600082015250565b60006148cf600b83613e46565b91506148da82614899565b602082019050919050565b600060208201905081810360008301526148fe816148c2565b9050919050565b600060408201905061491a60008301856147b7565b614927602083018461400b565b9392505050565b60008151905061493d81614442565b92915050565b60006020828403121561495957614958613ef7565b5b60006149678482850161492e565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006149a6600f83613e46565b91506149b182614970565b602082019050919050565b600060208201905081810360008301526149d581614999565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a1682613f5f565b9150614a2183613f5f565b9250828202614a2f81613f5f565b91508282048414831517614a4657614a456149dc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614a8782613f5f565b9150614a9283613f5f565b925082614aa257614aa1614a4d565b5b828204905092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000614ae6614ae1614adc84614aad565b614035565b614ab7565b9050919050565b614af681614acb565b82525050565b6000602082019050614b116000830184614aed565b92915050565b6000606082019050614b2c60008301866147b7565b614b3960208301856147b7565b614b46604083018461400b565b949350505050565b6000602082019050614b6360008301846147b7565b92915050565b600081519050614b7881613f69565b92915050565b600060208284031215614b9457614b93613ef7565b5b6000614ba284828501614b69565b91505092915050565b6000606082019050614bc060008301866147b7565b614bcd602083018561400b565b614bda604083018461400b565b949350505050565b6000614bed82613f5f565b9150614bf883613f5f565b9250828201905080821115614c1057614c0f6149dc565b5b92915050565b7f726561647920746f207769746864726177207072696d61727900000000000000600082015250565b6000614c4c601983613e46565b9150614c5782614c16565b602082019050919050565b60006040820190508181036000830152614c7b81614c3f565b9050614c8a602083018461400b565b92915050565b7f726561647920746f207769746864726177202b7365636f6e6461727900000000600082015250565b6000614cc6601c83613e46565b9150614cd182614c90565b602082019050919050565b60006040820190508181036000830152614cf581614cb9565b9050614d04602083018461400b565b92915050565b7f746f74616c2072657761726473206265666f7265000000000000000000000000600082015250565b6000614d40601483613e46565b9150614d4b82614d0a565b602082019050919050565b60006040820190508181036000830152614d6f81614d33565b9050614d7e602083018461400b565b92915050565b7f746f74616c207265776172647300000000000000000000000000000000000000600082015250565b6000614dba600d83613e46565b9150614dc582614d84565b602082019050919050565b60006040820190508181036000830152614de981614dad565b9050614df8602083018461400b565b92915050565b7f726561647920746f207769746864726177202b72657761726473000000000000600082015250565b6000614e34601a83613e46565b9150614e3f82614dfe565b602082019050919050565b60006040820190508181036000830152614e6381614e27565b9050614e72602083018461400b565b92915050565b7f746f74616c207265776172647320616674657200000000000000000000000000600082015250565b6000614eae601383613e46565b9150614eb982614e78565b602082019050919050565b60006040820190508181036000830152614edd81614ea1565b9050614eec602083018461400b565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614f547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614f17565b614f5e8683614f17565b95508019841693508086168417925050509392505050565b6000614f91614f8c614f8784613f5f565b614035565b613f5f565b9050919050565b6000819050919050565b614fab83614f76565b614fbf614fb782614f98565b848454614f24565b825550505050565b600090565b614fd4614fc7565b614fdf818484614fa2565b505050565b5b8181101561500357614ff8600082614fcc565b600181019050614fe5565b5050565b601f8211156150485761501981614ef2565b61502284614f07565b81016020851015615031578190505b61504561503d85614f07565b830182614fe4565b50505b505050565b600082821c905092915050565b600061506b6000198460080261504d565b1980831691505092915050565b6000615084838361505a565b9150826002028217905092915050565b61509d82613e3b565b67ffffffffffffffff8111156150b6576150b5614215565b5b6150c08254614868565b6150cb828285615007565b600060209050601f8311600181146150fe57600084156150ec578287015190505b6150f68582615078565b86555061515e565b601f19841661510c86614ef2565b60005b828110156151345784890151825560018201915060208501945060208101905061510f565b86831015615151578489015161514d601f89168261505a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6f776e6564526577617264730000000000000000000000000000000000000000600082015250565b60006151cb600c83613e46565b91506151d682615195565b602082019050919050565b600060408201905081810360008301526151fa816151be565b9050615209602083018461400b565b92915050565b7f756e636c61696d65645265776172647300000000000000000000000000000000600082015250565b6000615245601083613e46565b91506152508261520f565b602082019050919050565b6000604082019050818103600083015261527481615238565b9050615283602083018461400b565b92915050565b7f746f74616c000000000000000000000000000000000000000000000000000000600082015250565b60006152bf600583613e46565b91506152ca82615289565b602082019050919050565b600060408201905081810360008301526152ee816152b2565b90506152fd602083018461400b565b92915050565b600061530e82613f5f565b915061531983613f5f565b9250828203905081811115615331576153306149dc565b5b92915050565b7f6465706f73697465640000000000000000000000000000000000000000000000600082015250565b600061536d600983613e46565b915061537882615337565b602082019050919050565b6000604082019050818103600083015261539c81615360565b90506153ab602083018461400b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6153e681613f21565b82525050565b6153f581613fd5565b82525050565b60608201600082015161541160008501826153dd565b50602082015161542460208501826153dd565b50604082015161543760408501826153ec565b50505050565b600061544983836153fb565b60608301905092915050565b6000602082019050919050565b600061546d826153b1565b61547781856153bc565b9350615482836153cd565b8060005b838110156154b357815161549a888261543d565b97506154a583615455565b925050600181019050615486565b5085935050505092915050565b600060a0820190506154d5600083018861400b565b6154e2602083018761400b565b81810360408301526154f48186615462565b905061550360608301856147b7565b615510608083018461400b565b9695505050505050565b600067ffffffffffffffff82111561553557615534614215565b5b602082029050602081019050919050565b60006155596155548461551a565b614275565b9050808382526020820190506020840283018581111561557c5761557b61449a565b5b835b818110156155a557806155918882614b69565b84526020840193505060208101905061557e565b5050509392505050565b600082601f8301126155c4576155c361420b565b5b81516155d4848260208601615546565b91505092915050565b6000602082840312156155f3576155f2613ef7565b5b600082015167ffffffffffffffff81111561561157615610613efc565b5b61561d848285016155af565b91505092915050565b7f7265776172642076616c75650000000000000000000000000000000000000000600082015250565b600061565c600c83613e46565b915061566782615626565b602082019050919050565b6000604082019050818103600083015261568b8161564f565b905061569a602083018461400b565b92915050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006157006156fb836156c0565b6156cd565b9050919050565b60008160a01c9050919050565b600060ff82169050919050565b600061573461572f83615707565b615714565b9050919050565b606082016000808301549050615750816156ed565b61575d60008601826153dd565b506001830154905061576e816156ed565b61577b60208601826153dd565b5061578581615721565b61579260408601826153ec565b5050505050565b60006157a5838361573b565b60608301905092915050565b6000600282019050919050565b60006157c9826156a0565b6157d381856153bc565b93506157de836156ab565b8060005b8381101561580e57816157f58882615799565b9750615800836157b1565b9250506001810190506157e2565b5085935050505092915050565b600060a082019050615830600083018861400b565b61583d602083018761400b565b818103604083015261584f81866157be565b905061585e60608301856147b7565b61586b608083018461400b565b9695505050505050565b7f77697468647261772066726f6d2064657820616d6f756e740000000000000000600082015250565b60006158ab601883613e46565b91506158b682615875565b602082019050919050565b600060408201905081810360008301526158da8161589e565b90506158e9602083018461400b565b92915050565b7f77697468647261772066726f6d2064657820746f74616c20737570706c790000600082015250565b6000615925601e83613e46565b9150615930826158ef565b602082019050919050565b6000604082019050818103600083015261595481615918565b9050615963602083018461400b565b92915050565b600060808201905061597e60008301876147b7565b61598b60208301866147b7565b6159986040830185613fe1565b6159a5606083018461400b565b95945050505050565b600080604083850312156159c5576159c4613ef7565b5b60006159d385828601614b69565b92505060206159e485828601614b69565b9150509250929050565b600061010082019050615a04600083018b6147b7565b615a11602083018a6147b7565b615a1e6040830189613fe1565b615a2b606083018861400b565b615a38608083018761400b565b615a4560a083018661400b565b615a5260c08301856147b7565b615a5f60e083018461400b565b9998505050505050505050565b6000604082019050615a81600083018561400b565b8181036020830152615a9381846157be565b90509392505050565b6000604082019050615ab1600083018561400b565b615abe60208301846147b7565b9392505050565b7f616d6f756e744100000000000000000000000000000000000000000000000000600082015250565b6000615afb600783613e46565b9150615b0682615ac5565b602082019050919050565b60006040820190508181036000830152615b2a81615aee565b9050615b39602083018461400b565b92915050565b7f616d6f756e744200000000000000000000000000000000000000000000000000600082015250565b6000615b75600783613e46565b9150615b8082615b3f565b602082019050919050565b60006040820190508181036000830152615ba481615b68565b9050615bb3602083018461400b565b92915050565b600060a082019050615bce60008301886147b7565b615bdb60208301876147b7565b615be86040830186613fe1565b615bf5606083018561400b565b615c02608083018461400b565b9695505050505050565b600080600060608486031215615c2557615c24613ef7565b5b6000615c3386828701614b69565b9350506020615c4486828701614b69565b9250506040615c5586828701614b69565b9150509250925092565b7f616d6f756e744151756f74650000000000000000000000000000000000000000600082015250565b6000615c95600c83613e46565b9150615ca082615c5f565b602082019050919050565b60006040820190508181036000830152615cc481615c88565b9050615cd3602083018461400b565b92915050565b7f616d6f756e744251756f74650000000000000000000000000000000000000000600082015250565b6000615d0f600c83613e46565b9150615d1a82615cd9565b602082019050919050565b60006040820190508181036000830152615d3e81615d02565b9050615d4d602083018461400b565b92915050565b600061012082019050615d69600083018c6147b7565b615d76602083018b6147b7565b615d83604083018a613fe1565b615d90606083018961400b565b615d9d608083018861400b565b615daa60a083018761400b565b615db760c083018661400b565b615dc460e08301856147b7565b615dd261010083018461400b565b9a9950505050505050505050565b7f6164646564410000000000000000000000000000000000000000000000000000600082015250565b6000615e16600683613e46565b9150615e2182615de0565b602082019050919050565b60006040820190508181036000830152615e4581615e09565b9050615e54602083018461400b565b92915050565b7f6164646564420000000000000000000000000000000000000000000000000000600082015250565b6000615e90600683613e46565b9150615e9b82615e5a565b602082019050919050565b60006040820190508181036000830152615ebf81615e83565b9050615ece602083018461400b565b92915050565b7f6c69717569646974790000000000000000000000000000000000000000000000600082015250565b6000615f0a600983613e46565b9150615f1582615ed4565b602082019050919050565b60006040820190508181036000830152615f3981615efd565b9050615f48602083018461400b565b9291505056fea264697066735822122055427c84db0a2782c96d184a3349a842ec7b541e46787decd30b27c67368736c64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "deposit(uint256)": {
        "details": "Deposits primary token and issues this token"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "reinvest(bool,bool)": {
        "details": "it does it easy way - just exchanges everything to primary first and then runs part of deposit function"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "withdraw(uint256)": {
        "details": "Burns this token and withdraws primary investment token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateValue(address)": {
        "notice": "calculates value for the wallet denominated in primary tokens"
      },
      "reinvest(bool,bool)": {
        "notice": "Reinvests everything's owned into DEX (including rewards)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2005,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "primary",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 1346,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "secondary",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 1349,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "reward",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1131"
      },
      {
        "astId": 2180,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(TokanRouter)1336"
      },
      {
        "astId": 2183,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "pair",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TokanPair)1212"
      },
      {
        "astId": 2186,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "gauge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(TokanGauge)1188"
      },
      {
        "astId": 2188,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "stable",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2190,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "decimalsA",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2194,
        "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
        "label": "rewardExchangeRoute",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Route)1221_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Route)1221_storage)dyn_storage": {
        "base": "t_struct(Route)1221_storage",
        "encoding": "dynamic_array",
        "label": "struct TokanRouter.Route[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1131": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(TokanGauge)1188": {
        "encoding": "inplace",
        "label": "contract TokanGauge",
        "numberOfBytes": "20"
      },
      "t_contract(TokanPair)1212": {
        "encoding": "inplace",
        "label": "contract TokanPair",
        "numberOfBytes": "20"
      },
      "t_contract(TokanRouter)1336": {
        "encoding": "inplace",
        "label": "contract TokanRouter",
        "numberOfBytes": "20"
      },
      "t_struct(Route)1221_storage": {
        "encoding": "inplace",
        "label": "struct TokanRouter.Route",
        "members": [
          {
            "astId": 1216,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1218,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1220,
            "contract": "contracts/v2/TokanDexInvestment.sol:TokanDexInvestment",
            "label": "stable",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}